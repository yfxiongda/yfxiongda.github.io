<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你管这破玩意儿叫文件系统？</title>
      <link href="2021/09/12/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%84%BF%E5%8F%AB%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%9F/"/>
      <url>2021/09/12/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%84%BF%E5%8F%AB%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="你管这破玩意儿叫文件系统？"><a href="#你管这破玩意儿叫文件系统？" class="headerlink" title="你管这破玩意儿叫文件系统？"></a>你管这破玩意儿叫文件系统？</h1><h2 id="0-引子"><a href="#0-引子" class="headerlink" title="0 引子"></a>0 引子</h2><blockquote><p>以下文章来源于<strong>低并发编程</strong> ，作者闪客sun</p></blockquote><p>你手里有一块硬盘，大小为 1T</p><p><img src="https://i.loli.net/2021/08/23/T1cd23jsNXIQE4V.png" alt="pic_78b10855.png"></p><p>你还有一堆文件</p><p><img src="https://i.loli.net/2021/08/23/gDsn5oPl7kfAGN2.jpg" alt="pic_64df58b2.png"></p><p>这些文件在硬盘看来，就是一堆二进制数据而已</p><p><img src="https://i.loli.net/2021/08/23/YleUSGEs71qm45T.jpg" alt="pic_4a887e66.png"></p><p>你准备把这些文件存储在硬盘上，并在需要的时候读取出来。</p><p>要设计怎样的软件，才能更方便地在硬盘中读写这些文件呢？</p><h2 id="1-块"><a href="#1-块" class="headerlink" title="1 块"></a>1 块</h2><p>首先我不想和复杂的扇区，设备驱动等细节打交道，因此我先实现了一个简单的功能，将硬盘按逻辑分成一个个的<strong>块</strong>，并可以以块为单位进行读写。</p><p>每个块就定义为两个物理扇区的大小，即 1024 字节，就是 1KB 啦。</p><p>硬盘太大不好分析，我们就假设你的硬盘只有 1MB，那么这块硬盘则有 1024 个块。</p><p><img src="https://i.loli.net/2021/08/23/IBNqy1eU4zXC7i3.jpg" alt="pic_e675f6ce.png"></p><p>OK，我们开始存文件啦！ 准备一个文件</p><p><img src="https://i.loli.net/2021/08/23/ETYc9NKrqFuy7Rw.png" alt="pic_f595aae2.png"></p><p>随便选个块放进去，3 号块吧！</p><p><img src="https://i.loli.net/2021/08/23/uIK3VdcwW9lxvPn.jpg" alt="pic_593f36ca.png"></p><p>成功！首战告捷！</p><h2 id="2-位图"><a href="#2-位图" class="headerlink" title="2 位图"></a>2 位图</h2><p>再存一个文件！ 诶？发现问题了，万一这个文件也存到了 3 号块，不是把原来的文件覆盖了么？不行，得有一个地方记录，现在可使用的块有哪些，像这样。 </p><table><thead><tr><th align="center">块</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">块0</td><td align="center">未使用</td></tr><tr><td align="center">块1</td><td align="center">未使用</td></tr><tr><td align="center">块2</td><td align="center">已使用</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">块1023</td><td align="center">未使用</td></tr></tbody></table><p>那我们就用 0 号块，来记录所有块的使用情况吧！怎么记录呢？</p><p><strong>位图！</strong> </p><p><img src="https://i.loli.net/2021/08/23/gjeTMyQhcZRLVBO.gif" alt="pic_a9e40592.png"></p><p>那我们给块 0 起个名字，叫<strong>块位图</strong>，之后这个块 0 就专门用来记录所有块的使用情况，不再用来存具体文件了。  当我们再存入一个新文件时，只需要在块位图中找到第一个为 0 的位，就可以找到第一个还未被使用的块，将文件存入。同时，别忘了把块位图中的相应位置改成 1。 完美！</p><h2 id="3-inode"><a href="#3-inode" class="headerlink" title="3 inode"></a>3 inode</h2><p>下面，我们尝试读取刚刚的文件。</p><p>咦？又遇到问题了，我怎么找到刚刚的文件呢？根据块号么？这也太蠢了，就像你去书店找书，店员让你提供书的编号，而不是书名，显然不合理。</p><p> 因此我们给每个文件起一个名字，叫文件名，通过它来寻找这个文件。</p><p>那必然就要有一个地方，记录文件名与块号的对应关系，像这样。</p><table><thead><tr><th align="center">文件名</th><th align="center">块号</th></tr></thead><tbody><tr><td align="center">葵花宝典.txt</td><td align="center">3号块</td></tr><tr><td align="center">期末复习资料.mp4</td><td align="center">10号块</td></tr><tr><td align="center">论持久战.pdf</td><td align="center">12号块</td></tr></tbody></table><p>别急，既然都要选一个地方记录文件名称了，不妨多记录一点我们关心的信息吧，比如文件大小、文件创建时间、文件权限等。</p><p>这些东西自然也要保存在硬盘上，我们选择用一个固定大小的空间，来表示这些信息，多大空间呢？128 字节吧。 为啥是 128 字节呢？我乐意。</p><p><img src="https://i.loli.net/2021/08/23/bUTlxreRc3I6Vzf.png" alt="pic_86560a99.png"></p><p> 我们将这 128 字节的结构体，叫做一个 <strong>inode</strong>。</p><p>之后，我们每存入一个新的文件，不但要占用一个块来存放这个文件本身，还要占用一个 inode 来存放文件的这些<strong>元信息</strong>，并且这个 inode 的<strong>所在块号</strong>这个字段，就指向这个文件所在的块号.</p><p><img src="https://i.loli.net/2021/08/23/1Iv7gFZPc8GBK5R.jpg" alt="pic_a9185c20.png"></p><p>如果一个 inode 为 128 字节，那么一个块就可以容纳 8 个 inode，我们可以将这些 inode 编上号。</p><p><img src="https://i.loli.net/2021/08/23/cXfiBDMwIeQEVPq.jpg" alt="pic_16aa960f.png"></p><p>如果你觉得 inode 数不够，也可以用两个或者多个块来存放 inode 信息，但这样用于存放数据的块就少了，这就看你自己的平衡了。</p><p><img src="https://i.loli.net/2021/08/23/8aghsfKOA4TtiQc.jpg" alt="pic_1996bbb1.png"></p><p>同样，和块位图管理块的使用情况一样，我们也需要一个 <strong>inode 位图</strong>，来管理 inode 的使用情况。我们就把 inode 位图，放在 1 号块吧！ 同时，我们把 inode 信息，放在 2 号块，一共存 8 条 inode，这样我们的 2 号块就叫做 <strong>inode 表</strong>。 现在，我们的文件系统结构，变成了下面这个样子。</p><p><img src="https://i.loli.net/2021/08/23/X1nENBr7MjK5ROq.jpg" alt="pic_53b994d9.png"></p><blockquote><p>注意：块位图是管理可用的块，每一位代表一个块的使用与否。inode 位图管理的是一条一条的 inode，并不是 inode 所占用的块，比如上图中有 8 条 inode，则 inode 位图中就有 8 位是管理他们的使用与否。</p></blockquote><h2 id="4-间接索引"><a href="#4-间接索引" class="headerlink" title="4 间接索引"></a>4 间接索引</h2><p>现在，我们的文件很小，一个块就能容下。</p><p>但如果需要两个块、三个块、四个块呢？</p><p>很简单，我们只需要采用<strong>连续存储法</strong>，而 inode 则只记录文件的第一个块，以及后面还需要多少块，即可。</p><p>这种办法的缺点就是：容易留下大大小小的<strong>空洞</strong>，新的文件到来以后，难以找到合适的空白块，空间会被浪费。</p><p><img src="https://i.loli.net/2021/08/23/5zuhtagS2dUvpnX.png" alt="pic_70441e01.png"></p><p>看来这种方式不行，那怎么办呢？</p><p>既然在 inode 中记录了文件所在的块号，为什么不扩展一下，多记录几块呢？</p><p><img src="https://i.loli.net/2021/08/23/bUTlxreRc3I6Vzf.png" alt="pic_d7f95b78.png"></p><p>原来在 inode 中只记录了一个块号，现在扩展一下，记录 8 个块号！而且这些块<strong>不需要连续</strong>。</p><p><img src="https://i.loli.net/2021/08/23/FgJkhIc8qV2MXCn.png" alt="pic_019b14f8.png"></p><p>嗯，这是个可行的办法！</p><p>但是这也仅仅能表示 8 个块，能记录的最大文件是 8K （记住，一个块是 1K） , 现在的文件轻松就超过这个限制了，这怎么办？</p><p>很简单，我们可以让其中一个块，作为<strong>间接索引</strong>。</p><p><img src="https://i.loli.net/2021/08/23/xQd7nzRGo3PBvyL.png" alt="pic_e51af5e5.png"></p><p>这样瞬间就有 263 个块 （多了 256 -1 个块） 可用了，这种索引叫<strong>一级间接索引</strong>。</p><p>如果还嫌不够，就再弄一个块做一级间接索引，或者做二级间接索引 （二级间接索引则可以多出 256 * 256 - 1 个块) 。</p><p>我们的文件系统，暂且先只弄一个一级间接索引。硬盘一共才 1024 个块，一个文件 263 个块够大了。再大了不允许，就这么任性，爱用不用。</p><p>好了，现在我们已经可以保存很大的文件了，并且可以通过文件名和文件大小，将它们准确读取出来啦！</p><h2 id="5-超级块"><a href="#5-超级块" class="headerlink" title="5 超级块"></a>5 超级块</h2><p>但我们得精益求精，我们再想想看这个文件系统有什么毛病。</p><p>比如，inode 数量不够时，我们是怎么得知的呢？是不是需要在 inode 位图中找，找不到了才知道不够用了？</p><p>同样，对于块数量不够时，也是如此。</p><p>要是有个全局的地方，来记录这一切，就好了，也方便随时调整，比如这样</p><table><thead><tr><th align="center">项目</th></tr></thead><tbody><tr><td align="center">inode 数量</td></tr><tr><td align="center">空闲 inode 数量</td></tr><tr><td align="center">块数量</td></tr><tr><td align="center">空闲块数量</td></tr></tbody></table><p>inode 数量 空闲 inode 数量 块数量 空闲块数量 那我们就再占用一个块来存储这些数据吧！由于他们看起来像是站在上帝视角来描述这个文件系统的，所以我们把它放在最开始的块上，并把它叫做<strong>超级块</strong>，现在的布局如下。</p><p><img src="https://i.loli.net/2021/08/23/qTvm4b8HSYtNXiW.jpg" alt="pic_b2c9c063.png"></p><p>我们继续精益求精。</p><p>现在，<strong>块位图、inode 位图、inode 表</strong>，都是是固定地占据这块 1、块 2、块 3 这三个位置。</p><p>假如之后 inode 的数量很多，使得 inode 表或者 inode 位图需要占据多个块，怎么办？ 或者，块的数量增多 （硬盘本身大了，或者每个块变小了） ，块位图需要占据多个块，怎么办？</p><p>程序是死的，你不告诉它哪个块表示什么，它可不会自己猜。</p><p>很简单，与超级块记录信息一样，这些信息也选择一个块来记录，就不怕了。那我们就选择紧跟在超级块后面的 1 号块来记录这些信息吧，并把它称之为<strong>块描述符</strong>。</p><p><img src="https://i.loli.net/2021/08/23/TrHK72ENmiCOeWV.jpg" alt="pic_6cf27db5.png"></p><p>当然，这些所在块号只是记录起始块号，块位图、inode 位图、inode 表分别都可以占用多个块。</p><p>好了，大功告成！</p><h2 id="6-目录文件"><a href="#6-目录文件" class="headerlink" title="6 目录文件"></a>6 目录文件</h2><p>现在，我们再尝试存入一批文件。</p><ul><li> 葵花宝典.txt</li><li> 高量期末复习资料.mp4</li><li> 赘婿1.mp4</li><li> 赘婿2.mp4</li><li> 赘婿3.mp4</li><li> 赘婿4.mp4</li><li> 中科院物理所的秘密.pdf</li></ul><p>诶？这看着好不爽，所有的文件都是平铺开的，能不能拥有<strong>层级关系</strong>呢？比如这样</p><ul><li> 葵花宝典.txt</li><li> 高量期末复习资料.mp4</li><li>赘婿<ul><li> 赘婿1.mp4</li><li> 赘婿2.mp4</li><li> 赘婿3.mp4</li><li> 赘婿4.mp4</li></ul></li><li> 中科院物理所的秘密.pdf</li></ul><p>我们将葵花宝典.txt 这种称为<strong>普通文件</strong>，将赘婿这种称为<strong>目录文件</strong>，如果要访问赘婿1.mp4，那全文件名要写成</p><pre><code>赘婿/赘婿1.mp4。</code></pre><p>如何做到这一点呢？那我们又得把 inode 结构拿出来说事了。 </p><p><img src="https://i.loli.net/2021/08/23/bUTlxreRc3I6Vzf.png" alt="pic_311b038f.png"></p><p>此时需要一个属性来区分这个文件是普通文件，还是目录文件。</p><p>缺什么就补什么嘛，我们已经很熟悉了，专门加一个 4 字节，来表示文件类型。</p><p><img src="https://i.loli.net/2021/08/23/MeUHouxPbyKI9m1.png" alt="pic_41091188.png"></p><p>如果是<strong>普通文件</strong>，则这个 inode 所指向的数据块仍然和之前一样，就是文件本身原封不动的内容。</p><p>但如果是<strong>目录文件</strong>，则这个 inode 所指向的数据块，就需要重新规划了。</p><p>这个数据块里应该是什么样子呢？可以是一个一个指向不同 inode 的紧挨着的结构体，比如这样。</p><p><img src="https://i.loli.net/2021/08/23/SkcqdQxeg2UKWAy.png" alt="pic_12cc6dfe.png"> 这样先通过 赘婿 这个目录文件，找到所在的数据块。再根据这个数据块里的一个个带有 inode 信息的结构体，找到这个目录下的所有文件。</p><p>完美！</p><h2 id="7-子目录"><a href="#7-子目录" class="headerlink" title="7 子目录"></a>7 子目录</h2><p>不过这样的话，你想想看，如果想要查看一下赘婿<strong>这个目录下的所有文件</strong>（比如 ll 命令） ，将文件名和文件类型都展示出来，怎么办呢？</p><p>就需要把一个个结构体指向的 inode 从 inode 表中取出，再把文件名和文件类型取出，这很是浪费时间。</p><p>而让用户看到一个目录下的所有文件，又是一个极其常见的操作。</p><p>所以，不如把文件名和文件类型这种常见的信息，放在数据块中的结构体里吧。</p><p><img src="https://i.loli.net/2021/08/23/PuA5LqRIFdgxYMC.png" alt="pic_6f99b963.png"> 同时，inode 结构中的文件名，好像就没啥用了，这种变长的东西放在这种定长的结构中本身就很讨厌，早就想给它去掉了。而且还能给其他信息省下空间，比如文件所在块的数组，就能再多几个了。</p><p>太好了，去掉它！ </p><p><img src="https://i.loli.net/2021/08/23/KNkRBm6rdbnxDjH.png" alt="pic_2f359a2a.png"> OK，大功告成，现在我们就可以给文件分门别类放进不同目录下了，还可以在目录下创建目录，无限套娃！</p><h2 id="8-根目录"><a href="#8-根目录" class="headerlink" title="8 根目录"></a>8 根目录</h2><p>现在的文件系统，已经比较完善了，只是还有一点不太爽。 我们访问到一个目录下，可以很舒服地看到目录里的文件，然后再根据名称访问这个目录下的文件或者目录，整个过程都是一个套路。 但是，最上层的目录下的所有文件，即根目录，现在仍然需要通过遍历所有的 inode 来获得，能不能和上面的套路统一呢？ 答案非常简单，我们规定，<strong>inode 表中的 0 号 inode，就表示根目录</strong>，一切的访问，就从这个根目录开始！</p><p><img src="https://i.loli.net/2021/08/23/fKSVY4izQM9gURu.png" alt="pic_444b9afe.png"></p><p>好了，这回没有然后了！</p><p>我们最后来欣赏下我们的文件系统架构。 <img src="https://i.loli.net/2021/08/23/uDqeiYofz5AljR9.png" alt="pic_8d057073.png"></p><p>你是不是觉得这没啥了不起的。</p><p><strong>但这个破玩意，它就叫文件系统</strong> </p><p>完~</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次MySQL线上死锁分析</title>
      <link href="2021/07/11/%E4%B8%80%E6%AC%A1MySQL%E7%BA%BF%E4%B8%8A%E6%AD%BB%E9%94%81%E5%88%86%E6%9E%90/"/>
      <url>2021/07/11/%E4%B8%80%E6%AC%A1MySQL%E7%BA%BF%E4%B8%8A%E6%AD%BB%E9%94%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一次MySQL线上死锁分析"><a href="#一次MySQL线上死锁分析" class="headerlink" title="一次MySQL线上死锁分析"></a>一次MySQL线上死锁分析</h1><blockquote><p>本文原作者：<a href="https://blog.csdn.net/shixiaojula/article/details/114004360">是小桔啦</a>，此处略作整理和补充</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MySQL 的锁机制相信大家在学习 MySQL 的时候都有简单的了解过，那既然有锁就必定绕不开死锁这个问题。其实 MySQL 在大部分场景下是不会存在死锁问题的(比如并发量不高，SQL 写得不至于太拉胯的情况)，但是在高并发的业务场景下，一不注意就会产生死锁，而这个死锁分析起来也比较麻烦。</p><p>下面介绍一个遇到的一个比较<strong>奇怪的死锁</strong>。</p><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>简单说一下业务背景，公司做的是电商直播，这个死锁就出现在主播后台对商品信息进行更新的时候。</p><p>一个商品会有两个关联的 ID，通过其中任何一个 ID 都无法确定唯一一件商品（也就是说这个 ID 和商品是<strong>一对多</strong>的关系），只能同时查询两个 ID，才能确定一件商品。所以在更新商品信息的时候，需要在 where 条件中同时指定两个 ID，下面是死锁 SQL 的结构（已脱敏）：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test_table <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">"zhangsan"</span> <span class="token keyword">WHERE</span> class_id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">AND</span> teacher_id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这个 SQL 非常简单，根据两个等值条件，对一个字段进行更新。</strong></p><p>不知道你看到这个 SQL 会不会懵逼，按常理来说，应该是一个事务里有多条 SQL 才会有可能出现死锁，这一条 SQL 怎么可能出现死锁呢？</p><p>最后查出来是由于 MySQL 的索引合并优化导致的，即 Index Merge，下面会进行详细讲解并复现一下死锁场景。</p><h2 id="索引合并"><a href="#索引合并" class="headerlink" title="索引合并"></a>索引合并</h2><p>Index Merge 是 MySQL 在 5.0 的时候引入的一项优化功能，主要是用于优化一条 SQL 使用多个索引的情况。</p><p>我们来看刚刚的 SQL，假设 <code>class_id</code> 和 <code>teacher_id</code> 分别是两个普通索引：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test_table <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">"zhangsan"</span> <span class="token keyword">WHERE</span> class_id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">AND</span> teacher_id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果没有 Index Merge 优化的时候</strong>，MySQL 查询数据的步骤如下：</p><ul><li>根据 class_id 或 teacher_id （具体使用哪个索引由优化器根据实际数据情况自行判断，这里假设使用 <code>class_id</code> 的索引）在二级索引上查询到对应数据的主键 ID</li><li>根据查询到的主键 ID 进行回标查询（即查询聚簇索引），得到相应的数据行</li><li>从数据行中获取 <code>teacher_id</code> ，判断其是否等于 8，满足条件则返回</li></ul><p>从这个过程中，不难看出，<strong>MySQL 只使用到了一个索引</strong>，至于为什么不使用多个索引，简单来说就是因为多个索引在多棵树上，强行使用反而降低性能。</p><p>再来看看<strong>引入了 Index Merge 优化后</strong>，MySQL 查询数据的步骤如下：</p><ul><li><p>根据 <code>class_id</code> 查询到相应的主键，再根据主键回表查询到对应的数据行（记为结果集 A）</p></li><li><p>根据 <code>teacher_id</code> 查询到相应的主键，再根据主键回表查询到对应的数据行（记为结果集 B）</p></li><li><p>将结果集 A 和结果集 B 执行交集操作，获得最终满足条件的结果集</p></li></ul><p>这里可以看出，有了 Index Merge 之后，MySQL 将一条 SQL 语句拆分成了两个查询步骤，<strong>分别使用两个索引，再用交集操作优化性能</strong>。</p><h2 id="死锁分析"><a href="#死锁分析" class="headerlink" title="死锁分析"></a>死锁分析</h2><p>分析完了 Index Merge 的步骤，我们再回过头想一下为什么会出现死锁呢？</p><p>还记得上面说的 Index Merge 将一条 SQL 查询拆分成了两个步骤吗，问题就出现在这里。我们知道 <code>UPDATE</code> 语句是会加上一个<strong>行级排他锁</strong>的，在分析加锁步骤之前，我们假设有如下一个数据表：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3844e0d10f8cb651115b686f51a330df.png"></p><p>上表数据满足我们文章开头说的特点，根据 <code>class_id</code> 和 <code>teacher_id</code> 单个字段均无法唯一确定一条数据，只能联合两个字段，才能确定一条数据，并且设定 <code>class_id</code> 和 <code>teacher_id</code> 分别为两个普通索引。</p><p>假设有如下两条 SQL 语句并发执行，它们的参数完全不同，直觉告诉我们应该不会出现死锁，但直觉往往是错误的：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// 线程 A 执行</span><span class="token keyword">UPDATE</span> test_table <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">"zhangsan"</span> <span class="token keyword">WHERE</span> class_id <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">AND</span> teacher_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程 B 执行</span><span class="token keyword">UPDATE</span> test_table <span class="token keyword">SET</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">"zhangsan"</span> <span class="token keyword">WHERE</span> class_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> teacher_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么<strong>在 Index Merge 的优化下</strong>，并发执行如上 SQL 的时候，MySQL 的加锁步骤如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dd4390c91f1c83e58dc756177c737490.png"></p><p><strong>最终，两个事务互相等待，形成死锁</strong></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>因为这个死锁本质上还是由于 Index Merge 这个优化导致的，所以要解决这个场景的死锁问题，本质上只要让 MySQL 不走 Index Merge 优化即可。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>手动将一条 SQL 拆分成多条 SQL，在逻辑层做交集操作，阻止 MySQL 的憨憨优化行为，比如这里我们可以先根据 <code>class_id</code> 查询到相应主键，再根据 <code>teacher_id</code> 查询相应主键，最后根据交集后的主键查询数据。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>建立联合索引，比如这里可以将 <code>class_id</code> 和 <code>teacher_id</code> 建立一个联合索引，MySQL 就不会走 Index Merge 了</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>强制走单个索引，在表名后添加 <code>for index(class_id)</code> 可以指定该语句仅走 class_id 索引</p><h3 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h3><p>关闭 Index Merge 优化：</p><ul><li><p>永久关闭：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">GLOBAL</span><span class="token operator">|</span><span class="token keyword">SESSION</span><span class="token punctuation">]</span> optimizer_switch<span class="token operator">=</span><span class="token string">'index_merge=off'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>临时关闭：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token comment" spellcheck="true">/*+ NO_INDEX_MERGE(test_table) */</span> test_table SETname<span class="token operator">=</span><span class="token string">"zhangsan"</span> <span class="token keyword">WHERE</span> class_id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">AND</span> teacher_id <span class="token operator">=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>为了方便测试，这里提供一个 SQL 脚本，将其用 Navicat 导入后即可得到需要的测试数据：</p><p>下载地址：<a href="https://cdn.juzibiji.top/file/index_merge_student.sql">https://cdn.juzibiji.top/file/index_merge_student.sql</a></p><p>导入之后，我们会得到如下格式的 10000 条测试数据：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b2dc406b2a656cf7edd8503eaec9dbbb.png"></p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>由于篇幅限制，这里仅给出代码 Gist 链接：<a href="https://gist.github.com/juzi214032/17c0f7a51bd8d1c0ab39fa203f930c60">https://gist.github.com/juzi214032/17c0f7a51bd8d1c0ab39fa203f930c60</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/926d2a5947f3b5528cfd3adbf7a7fc0f.png"></p><p>上述代码主要是开启 100 个线程执行我们的数据修改 SQL 语句，来模拟线上并发情况，在运行几秒钟后，我们会得到下面这样一个报错：</p><pre class="line-numbers language-log"><code class="language-log">com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这代表已经产生了死锁异常。</p><h3 id="死锁分析-1"><a href="#死锁分析-1" class="headerlink" title="死锁分析"></a>死锁分析</h3><p>上面我们用代码已经构造出了一个死锁，接下来我们进入 MySQL 看看死锁日志，在 MySQL 中执行如下命令即可查看死锁日志：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">ENGINE</span> <span class="token keyword">INNODB</span> <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/84c61d74c6a05925daaa2baad6700767.png"></p><p>在日志中，我们找到 <code>LATEST DETECTED DEADLOCK</code> 这一行，这里开始便是我们上次产生的死锁，接下来我们开始分析。</p><p>通过第 29 行可以看到，事务 1 执行的 SQL 的条件是 <code>class_id = 6</code> 和 <code>teacher_id = 16</code>，它目前持有了一个行锁，第 34~39 行是该行数据，34 行是主键的十六进制表示，我们转换为 10 进制即为 <strong>1616</strong>。同样的，看 45 行，其等待拿锁的是主键 id 1517 的数据。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/623f79359f3da63e5a29959e23d558af.png"></p><p>接下来用同样的方法分析事务 2，可知事务 2 持有了 3 把锁，分别是主键 id 为<strong>1317、1417、1517</strong> 的数据行，等待的是 <strong>1616</strong> 。</p><p>看到这里我们就已经发现了，事务 1 持有 1616 等待 1517，事务 2 持有1517 等待 1616，所以形成了一个死锁。此时 MySQL 的处理方法是回滚持有锁最少的事务，并且 JDBC 会抛出我们前面的 MySQLTransactionRollbackException 回滚异常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个死锁在排查的时候其实非常不好排查，如果你不知道 MySQL 的 Index Merge，那么在排查的时候其实是毫无头绪的，因为呈现在你面前的就只有一条非常简单的 SQL，就算看死锁日志，也是一样的不明所以。</p><p>所以处理这类问题，更多的还是考验你的知识储备量和经验，只要遇到过一次，后面在写 SQL 的时候多加注意就好了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端实用技巧</title>
      <link href="2021/07/11/Linux%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>2021/07/11/Linux%E7%BB%88%E7%AB%AF%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux终端实用技巧"><a href="#Linux终端实用技巧" class="headerlink" title="Linux终端实用技巧"></a>Linux终端实用技巧</h1><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/ZaugCxaD6kPT-fbW9rSaIQ">微信公众号：Linux网络安全</a>，此处做了补充和修改。</p></blockquote><h2 id="1-快速清空文件方法"><a href="#1-快速清空文件方法" class="headerlink" title="1. 快速清空文件方法"></a>1. 快速清空文件方法</h2><p>快速清空一个文件，有 N 种方法，我比较喜欢下边这种，因为它最短</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token operator">></span> access.log^C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不过瘾？好吧，我也顺便总结下，其它几种最常见的清空文件的方法</p><ul><li><code>: &gt; access.log</code></li><li><code>true &gt; access.log</code></li><li><code>cat /dev/null &gt; access.log</code></li><li><code>echo -n "" &gt; access.log</code></li><li><code>echo &gt; access.log</code></li><li><code>truncate -s 0 access.log</code></li></ul><p>简单解释下， <code>:</code> 在 shell 中是一个内置命令，表示 <code>no-op</code>，大概就是空语句的意思，所以 <code>:</code> 的那个用法，就是执行命令后，什么都没有输出，将空内容覆盖到文件。</p><h2 id="2-快速生成大文件"><a href="#2-快速生成大文件" class="headerlink" title="2. 快速生成大文件"></a>2. 快速生成大文件</h2><p>有时候，在 Linux 上，我们需要一个大文件，用于测试上传或下载的速度，通过 <code>dd</code> 命令可以快速生成一个大文件</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>file.img bs<span class="token operator">=</span>1M count<span class="token operator">=</span>1024<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令，生成一个文件名为 file.img 大小为 1G 的文件。</p><h2 id="3-安全擦除硬盘数据"><a href="#3-安全擦除硬盘数据" class="headerlink" title="3. 安全擦除硬盘数据"></a>3. 安全擦除硬盘数据</h2><p>介绍一种擦除硬盘数据的方法，高效，安全。可以通过 <code>dd</code> 命令，轻松实现：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">dd</span> if<span class="token operator">=</span>/dev/urandom of<span class="token operator">=</span>/dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>/dev/urandom</code> 生成随机数据，将生成的数据写入 <code>sda</code> 硬盘中，相当于安全的擦除了硬盘数据。</p><p>当年陈老师，如果学会了这条命令，可能也不会有艳兆门事件了。</p><h2 id="4-快速制作系统盘"><a href="#4-快速制作系统盘" class="headerlink" title="4. 快速制作系统盘"></a>4. 快速制作系统盘</h2><p>在 Linux 下制作系统盘，老毛桃神么工具都弱爆了，直接一条命令搞定：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">dd</span> if<span class="token operator">=</span>ubuntu-server-amd64.iso of<span class="token operator">=</span>/dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>哈哈，是不是很爽，<code>sdb</code> 可以 U 盘，也可以是普通硬盘</p><h2 id="5-查看某个进程的运行时间"><a href="#5-查看某个进程的运行时间" class="headerlink" title="5. 查看某个进程的运行时间"></a>5. 查看某个进程的运行时间</h2><p>可能，大部分同学只会使用 <code>ps aux</code>，其实可以通过 <code>-o</code> 参数，指定只显示具体的某个字段，会得到更清晰的结果。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ps</span> -p 10167 -o etimes,etimeELAPSED     ELAPSED1712055 19-19:34:15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 <code>etime</code> 获取该进程的运行时间，可以很直观地看到，进程运行了 19 天</p><p>同样，可以通过 <code>-o</code> 指定 <code>rss</code> 可以只获取该进程的内存信息。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ps</span> -p 10167 -o rss  RSS 2180<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-动态实时查看日志"><a href="#6-动态实时查看日志" class="headerlink" title="6. 动态实时查看日志"></a>6. 动态实时查看日志</h2><p>通过 <code>tail</code> 命令 <code>-f</code> 选项，可以动态地监控日志文件的变化，非常实用</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">tail</span> -f test.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想在日志中出现 <code>Failed</code> 等信息时立刻停止 tail 监控，可以通过如下命令来实现：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">tail</span> -f test.log <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/Failed/ q'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-时间戳的快速转换"><a href="#7-时间戳的快速转换" class="headerlink" title="7. 时间戳的快速转换"></a>7. 时间戳的快速转换</h2><p>时间操作，对程序员来说就是家常便饭。有时候希望能够将时间戳，转换为日期时间，在 Linux 命令行上，也可以快速的进行转换：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">date</span> -d@1234567890 +<span class="token string">"%Y-%m-%d %H:%M:%S"</span>2009-02-14 07:31:30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，也可以在命令行上，查看当前的时间戳</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">date</span> +%s1617514141<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-优雅的计算程序运行时间"><a href="#8-优雅的计算程序运行时间" class="headerlink" title="8. 优雅的计算程序运行时间"></a>8. 优雅的计算程序运行时间</h2><p>在 Linux 下，可以通过 <code>time</code> 命令，很容易获取程序的运行时间：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">time</span> ./testreal    0m1.003suser    0m0.000ssys     0m0.000s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，程序的运行时间为: <code>1.003s</code>。细心的同学，会看到 <code>real</code> 貌似不等于 <code>user</code> + <code>sys</code>，而且还远远大于，这是怎么回事呢？</p><p>先来解释下这三个参数的含义：</p><ul><li><code>real</code>：表示的钟表时间，也就是从程序执行到结束花费的时间；</li><li><code>user</code>：表示运行期间，cpu 在用户空间所消耗的时间；</li><li><code>sys</code>：表示运行期间，cpu 在内核空间所消耗的时间；</li></ul><p>由于 <code>user</code> 和 <code>sys</code> 只统计 cpu 消耗的时间，程序运行期间会调用 sleep 发生阻塞，也可能会等待网络或磁盘 IO，都会消耗大量时间。因此对于类似情况，<code>real</code> 的值就会大于其它两项之和。</p><p>下面贴一下进程状态图帮助理解：</p><p><img src="https://i.loli.net/2021/07/11/zRaWPvc2wTQSy5e.png" alt="进程状态图"></p><p>另外，也会遇到 <code>real</code> 远远小于 <code>user</code> + <code>sys</code> 的场景，这是什么鬼情况？</p><p>这个更好理解，如果程序在多个 cpu 上并行，那么 <code>user</code> 和 <code>sys</code> 统计时间是多个 cpu 时间，实际消耗时间 <code>real</code> 很可能就比其它两个之和要小了</p><h2 id="9-命令行查看ascii码"><a href="#9-命令行查看ascii码" class="headerlink" title="9. 命令行查看ascii码"></a>9. 命令行查看ascii码</h2><p>我们在开发过程中，通常需要查看 <code>ascii</code> 码，通过 Linux 命令行就可以轻松查看，而不用去 Google 或 Baidu</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">man</span> ascii<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-优雅的删除乱码的文件"><a href="#10-优雅的删除乱码的文件" class="headerlink" title="10. 优雅的删除乱码的文件"></a>10. 优雅的删除乱码的文件</h2><p>在 Linux 系统中，会经常碰到名称乱码的文件。想要删除它，却无法通过键盘输入名字，有时候复制粘贴乱码名称，终端可能识别不了，该怎么办？</p><p>不用担心，下边来展示下 <code>find</code> 是如何优雅的解决问题的。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span>  -i138957 a.txt  138959 T.txt  132395 ڹ��.txt$ <span class="token function">find</span> <span class="token keyword">.</span> -inum 132395 -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>命令中，<code>-inum</code> 指定的是文件的 <code>inode</code> 号，它是系统中每个文件对应的唯一编号，find 通过编号找到后，执行删除操作。</p><h2 id="11-获取公网IP地址"><a href="#11-获取公网IP地址" class="headerlink" title="11. 获取公网IP地址"></a>11. 获取公网IP地址</h2><p>在办公或家庭环境，我们的虚拟机或服务器上配置的通常是内网 IP 地址，我们如何知道，在与外网通信时，我们的公网出口 IP 是神马呢？</p><p>这个在 Linux 上非常简单，一条命令搞定</p><pre class="line-numbers language-bash"><code class="language-bash">$ curl ip.sb$ curl ifconfig.me<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述两条命令都可以</p><h2 id="12-如何批量下载网页资源"><a href="#12-如何批量下载网页资源" class="headerlink" title="12. 如何批量下载网页资源"></a>12. 如何批量下载网页资源</h2><p>有时，同事会通过网页的形式分享文件下载链接，在 Linux 系统，通过 <code>wget</code> 命令可以轻松下载，而不用写脚本或爬虫</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">wget</span> -r -nd -np --accept<span class="token operator">=</span>pdf http://fast.dpdk.org/doc/pdf-guides/<span class="token comment" spellcheck="true"># --accept：选项指定资源类型格式 pdf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="13-历史命令使用技巧"><a href="#13-历史命令使用技巧" class="headerlink" title="13. 历史命令使用技巧"></a>13. 历史命令使用技巧</h2><p>分享几个历史命令的使用技巧，能够提高你的工作效率。</p><ul><li><code>!!</code>：重复执行上条命令；</li><li><code>!N</code>：重复执行 history 历史中第 N 条命令，N 可以通过 history 查看；</li><li><code>!pw</code>：重复执行最近一次，以<code>pw</code>开头的历史命令，这个非常有用，小编使用非常高频；</li><li><code>!$</code>：表示最近一次命令的最后一个参数；</li></ul><p>猜测大部分同学没用过 <code>!$</code>，这里简单举个例子，让你感受一下它的高效用法</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim /root/sniffer/src/main.c$ <span class="token function">mv</span> <span class="token operator">!</span>$ <span class="token operator">!</span>$.bak<span class="token comment" spellcheck="true"># 相当于</span>$ <span class="token function">mv</span> /root/sniffer/src/main.c /root/sniffer/src/main.c.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当前工作目录是 root，想把 main.c 改为 main.c.bak。正常情况你可能需要敲 2 遍包含 main.c 的长参数，当然你也可能会选择直接复制粘贴。</p><p>而我通过使用 <code>!$</code> 变量，可以很轻松优雅的实现改名，是不是很 <code>hacker</code> 呢？</p><h2 id="14-快速搜索历史命令"><a href="#14-快速搜索历史命令" class="headerlink" title="14. 快速搜索历史命令"></a>14. 快速搜索历史命令</h2><p>在 Linux 下经常会敲很多的命令，我们要怎么快速查找并执行历史命令呢？</p><p>通过<em>上下键</em>来翻看历史命令，No No No，可以通过执行 <code>Ctrl + r</code>，然后键入要所搜索的命令关键词，进行搜索，回车就可以执行，非常高效。</p><h2 id="15-隐藏命令历史"><a href="#15-隐藏命令历史" class="headerlink" title="15. 隐藏命令历史"></a>15. 隐藏命令历史</h2><p>最后，再分享一个真正的黑客不能忽略技巧。我们在所要执行的命令前，加一个<strong>空格</strong>，那这条命令就不会被 <code>history</code> 保存到历史记录</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础学习</title>
      <link href="2021/05/19/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/05/19/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="IDEA项目结构"><a href="#IDEA项目结构" class="headerlink" title="IDEA项目结构"></a>IDEA项目结构</h2><p><img src="https://i.loli.net/2021/05/19/p8szrflw9eyaB7g.png" alt="IDEA项目结构"></p><h2 id="IDEA常用的快捷键"><a href="#IDEA常用的快捷键" class="headerlink" title="IDEA常用的快捷键"></a>IDEA常用的快捷键</h2><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>Alt+Enter</code></td><td align="center">导入包，自动修正代码</td></tr><tr><td align="center"><code>Ctrl+Y</code></td><td align="center">删除光标所在行</td></tr><tr><td align="center"><code>Ctrl+D</code></td><td align="center">复制光标所在行，并粘贴在下一行</td></tr><tr><td align="center"><code>Ctrl+Alt+L</code></td><td align="center">格式化代码</td></tr><tr><td align="center"><code>Ctrl+/</code></td><td align="center">单行注释 / 取消单行注释</td></tr><tr><td align="center"><code>Ctrl+Shift+/</code></td><td align="center">多行注释 / 取消多行注释</td></tr><tr><td align="center"><code>Alt+Ins</code></td><td align="center">自动生成代码，toString，get，set 等方法</td></tr><tr><td align="center"><code>Alt+Shift+上下箭头</code></td><td align="center">移动当前代码行</td></tr><tr><td align="center"><code>HOME/END</code></td><td align="center">快速移动光标到行首/行尾</td></tr></tbody></table><h2 id="IDEA代码自动生成"><a href="#IDEA代码自动生成" class="headerlink" title="IDEA代码自动生成"></a>IDEA代码自动生成</h2><ul><li><p><strong><code>psvm</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>5.fori</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>数组名称.fori</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 数组名称<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>sout</code></strong></p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Alt + Insert</code></p><p>在定义一个标准类时，按 <code>Alt + Insert</code> 可以快速生成 <code>Getter/Setter</code> 方法，选择 <code>Constructor</code> 可以快速生成无参数和全参数的构造方法</p></li></ul><h1 id="Java中的关键字"><a href="#Java中的关键字" class="headerlink" title="Java中的关键字"></a>Java中的关键字</h1><h2 id="关键字的特点"><a href="#关键字的特点" class="headerlink" title="关键字的特点"></a>关键字的特点</h2><ul><li><strong>完全小写</strong>的字母</li><li>在增强版的记事本（如Notepad++）有特殊颜色</li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul><li><strong>标识符</strong>是指在程序中，我们自定义内容。比如类的名字、方法的名字、和变量的名字等<ul><li>HelloWorld案例中，出现的标识符有类名字<code>HelloWorld</code></li></ul></li></ul><ul><li><p><strong>命名规则</strong>：<code>硬性要求</code></p><ul><li>标识符可以包含<code>英文字母26个（区分大小写）</code>、<code>0~9数字</code>、<code>$（美元符号）</code>和<code>_（下划线）</code></li><li>标识符不能以数字开头</li><li>标识符不能是关键字</li></ul></li><li><p><strong>命名规范</strong>：<code>软性建议</code></p><ul><li>类名规范：首字母大写，后面每个单侧首字母大写（大驼峰式）</li><li>变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）</li><li>方法名规范：同变量名</li></ul></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h2><p>Java的数据类型基本分为两大类：</p><ul><li><strong>基本数据类型</strong>：包括<code>整数</code>、<code>浮点数</code>、<code>字符</code>、<code>布尔</code></li><li><strong>引用数据类型</strong>：包括<code>字符串</code>、<code>类</code>、<code>数组</code>、<code>接口</code></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>四类八种基本数据类型：</p><table><thead><tr><th><strong>数据类型</strong></th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-127~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int（<code>默认</code>）</td><td>4个字节</td><td>-2^31~2^31-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2^63~2^63-1</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>1.4031E-45~3.4028E+38</td></tr><tr><td>双精度浮点</td><td>double（<code>默认</code>）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0~65535</td></tr><tr><td>布尔类型</td><td>Boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><p>一个<code>int</code>类型的变量和一个<code>byte</code>类型的变量进行加法运算，结果将会是<code>int</code>类型</p><ul><li><p><strong>自动转换</strong>：将<code>取值范围小的类型</code>自动提升为<code>取值范围大的类型</code>。</p><p>同样道理，当一个<code>int</code>类型的变量和一个<code>double</code>变量运算时，<code>int</code>类型将会自动提升为<code>double</code>类型进行运算</p></li></ul><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a><strong>强制转换</strong></h3><p>将<code>1.5</code>赋值到<code>int</code>类型变量会发生错误，编译失败。</p><p><code>double</code>类型内存8个字节，<code>int</code>类型内存4个字节，<code>1.5</code>是<code>double</code>类型，取值范围大于<code>int</code>。要想赋值成功，只能通过强制类型转换。</p><ul><li><strong>强制类型转换</strong>：将<code>取值范围大的类型</code>强制转换成<code>取值范围小的类型</code></li></ul><p><strong>转换格式</strong>：</p><p><code>数据类型 变量名 = (数据类型)被转换数据值</code></p><p> <strong>强烈注意</strong>：</p><ul><li>浮点转成整数，直接取消小数点，可能造成数据损失精度。</li><li><code>int</code>强制转换成<code>short</code>砍掉连个字节，可能造成数据丢失。</li><li><code>byte</code>、<code>short</code>、<code>char</code>这三种类型在运算的时候，都会被首先提升为int类型，然后再计算</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加法运算，字符串连接运算</td></tr><tr><td align="center"><code>-</code></td><td align="center">减法运算</td></tr><tr><td align="center"><code>*</code></td><td align="center">乘法运算</td></tr><tr><td align="center"><code>/</code></td><td align="center">除法运算</td></tr><tr><td align="center"><code>%</code></td><td align="center">取模运算</td></tr><tr><td align="center"><code>++</code>、<code>--</code></td><td align="center">自增、自减运算</td></tr></tbody></table><p><strong>注意</strong>：</p><ul><li>Java中，整数使用以上运算符，无论怎么计算，都不会得到小数。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算结果是3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><code>+</code>中字符串连接和字符串加减优先级</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    String str1 <span class="token operator">=</span> <span class="token string">"Hello,"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果是Hello,2030</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>=</code></td><td align="center">等于</td></tr><tr><td align="center"><code>+-</code></td><td align="center">加等于</td></tr><tr><td align="center"><code>-=</code></td><td align="center">减等于</td></tr><tr><td align="center"><code>*=</code></td><td align="center">乘等于</td></tr><tr><td align="center"><code>/=</code></td><td align="center">除等于</td></tr><tr><td align="center"><code>%=</code></td><td align="center">取模等于</td></tr></tbody></table><ul><li><p>赋值运算符就是将符号右边的值赋给左边的变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mian</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    i <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    i = i + 5</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>运算结果是布尔型</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>&amp;&amp;</code></td><td align="center">与</td></tr><tr><td align="center"><code>||</code></td><td align="center">或</td></tr><tr><td align="center"><code>!</code></td><td align="center">非</td></tr></tbody></table><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ul><li><p>格式：</p><p>数据类型 变量 = 条件判断 ? 表达式A : 表达式B；</p></li><li><p>流程：</p><p>首先判断条件是否成立：</p><p>​    如果成立，那么将表达式 A 的值赋值给左侧的变量；</p><p>​    如果不成立，那么将 B 赋值给左侧的变量；</p><p>二者选其一。</p></li></ul><h1 id="方法入门"><a href="#方法入门" class="headerlink" title="方法入门"></a>方法入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>方法</strong>：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</p><p>当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><ul><li><p>定义格式：</p><pre class="line-numbers language-java"><code class="language-java">修饰符 返回值类型 方法名    <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义格式解释;</p><ul><li>修饰符：目前固定写法 <code>public static</code>.</li><li>返回值类型：目前固定写法 <code>void</code>，其他返回值类型在后面的课程讲解。</li><li>方法名：为我们定义的方法起名，满足标识符的规范，来调用方法。</li></ul></li></ul><h2 id="方法的定义-1"><a href="#方法的定义-1" class="headerlink" title="方法的定义"></a>方法的定义</h2><p>格式：方法名();</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句体<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句体<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    语句体<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><ul><li><p><strong><code>switch</code>语句格式：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> 常量值<span class="token number">1</span><span class="token operator">:</span>        语句体<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 常量值<span class="token number">2</span><span class="token operator">:</span>        语句体<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句体n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>流程</strong></p><ol><li>计算出表达式的值；</li><li>和 <code>case</code> 值比较，一旦有对应的值，就会<strong>从该条语句开始执行</strong>，在执行的过程中，遇到 <code>break</code> 就会结束；d</li><li>如果所有的 <code>case</code> 都和表达式不匹配，就会执行 <code>default</code> 语句体部分，然后程序结束；</li></ol></li><li><p><strong>注意</strong>：</p><ul><li><code>switch</code> 后面小括号中只能是以下数据类型：<ul><li>基本数据类型：byte/short/char/int</li><li>引用数据类型：String字符串/enum枚举</li></ul></li><li><code>switch</code> 语句格式可以很灵活：前后顺序可以颠倒，<code>break</code> 可以省略。<code>break</code> 省略的时候，由于是从匹配的 <code>case</code> 值<strong>开始执行</strong>，因此，会发生 <strong><code>case</code> 穿透</strong></li></ul></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化表达式；布尔表达式；步进表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：<code>for</code> 循环里的 <code>i</code> 只能在 <code>for</code> 循环里使用</p><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><pre class="line-numbers language-java"><code class="language-java">初始化表达式<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">;</span>    步进表达式<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="do-…-while-循环"><a href="#do-…-while-循环" class="headerlink" title="do … while 循环"></a>do … while 循环</h3><pre class="line-numbers language-java"><code class="language-java">初始化表达式<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span>    循环体<span class="token punctuation">;</span>    步进表达式<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会先无条件执行一次 <code>do</code> 里面的内容，然后再执行 <code>while</code> 判断</p><h1 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><pre class="line-numbers language-java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名称<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修饰符：<code>public static</code> 固定写法 </li><li>返回值类型： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者 </li><li>参数列表：方法在运算过程中的未知数据，调用者调用方法时传递</li><li>return：将方法执行后的结果带给调用者，方法执行到 return ，整体方法运行结束</li></ul><h2 id="方法的三种调用格式"><a href="#方法的三种调用格式" class="headerlink" title="方法的三种调用格式"></a>方法的三种调用格式</h2><ul><li><p>单独调用</p><p>方法名称(参数);</p></li><li><p>打印调用</p><p>把单独调用放在赋值语句里面</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>方法名称<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>赋值调用</p><p>数据类型 变量名称 = 方法名称(参数);</p></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>方法不能嵌套</li><li>一个方法中可以有个多个 <code>return</code> 语句，但是必须保证同时只有一个会被执行。</li></ul><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>多个方法的名称一样，但是参数列表不一样</p><p>好处：只需要记住唯一一个方法名称，就可以实现类似的多个功能</p><p>下面的例子中，完成了对对两个、三个、四个数字求和的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodOverload</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li><p>数组是一种引用数据类型</p></li><li><p>数组当中的多个数据，类型必须统一</p></li><li><p>数组的长度在程序运行期间不可改变</p></li><li><p>数组的初始化：</p><ul><li><p>动态初始化（指定长度）</p><p>数据类型[] 数组名称 = new 数据类型[数组长度];</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 动态初始化一个300的 int 类型数组</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ArrayInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 动态初始化一个5的 String 类型数组，里面可以存放 5 个字符串</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ArrayStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>静态初始化（指定内容）</p><ul><li>标准格式：数据类型[] 数组名臣 = new 数据类型[] {元素1, 元素2, …};</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化一个放食物的 food 数组</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> food <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"rice"</span><span class="token punctuation">,</span> <span class="token string">"noodle"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>省略格式：数据类型[] 数组名称 = {元素1, 元素2, …}</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>注意：</p><ul><li>直接打印输出数组名的话会得到数组的内存信息</li><li>对于动态初始化的数组，元素会自动拥有一个默认值：<ul><li>数组为整数类型，默认为 0；</li><li>数组为浮点类型，默认为 0.0；</li><li>数组为字符类型，默认为‘\u0000’；</li><li>如果是布尔类型，默认为 false；</li><li>如果是引用类型，默认为 null</li></ul></li></ul></li><li><p>数组的基本操作</p><ul><li>获取数组长度：数组名称.length</li><li>数组的遍历：<code>数组名称.fori</code> <code>Tab</code> 键补全</li></ul></li></ul><h1 id="Java中的内存划分"><a href="#Java中的内存划分" class="headerlink" title="Java中的内存划分"></a>Java中的内存划分</h1><ol><li><strong>栈（Stack）：</strong>存放的都是方法中的局部变量。方法的运行一定要在栈当中运行</li><li><strong>堆（Heap）：</strong>凡是 <code>new</code> 出来的东西，都在堆当中。堆内存里的东西都有地址值，堆内存里的数据都有默认值</li><li><strong>方法区（Method Area）：</strong>存储 <code>.class</code> 相关信息，包含方法的信息</li><li><strong>本地方法栈（Native Method Stack）：</strong>与操作系统相关</li><li><strong>寄存器（PC Register）：</strong>与 CPU 相关</li></ol><h1 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><strong>对象</strong>泛指一切事物，每种事物都具备自己的<strong>属性</strong>和<strong>行为</strong>。面向对象思想就是在计算机程序设计过程中，参照现实中的事物，将事物的属性特征、行为特征抽象出来，描述成计算机时间的设计思想。它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步地去操作实现。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><ul><li><strong>类</strong>：是一组相关<strong>属性</strong>和行为的集合，可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。</li><li><strong>属性</strong>：开水奇偶该事物的状态信息。</li><li><strong>行为</strong>：就是该事物能够做什么。</li></ul><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><ul><li><strong>对象</strong>：是一类事物的具体体现，对象是类的一个<strong>实例</strong>，必须具备该类事物的属性和行为。</li></ul><h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul><li>类是对一类事物的描述，是<strong>抽象的</strong></li><li>对象是一类事物的实例，是<strong>具体的</strong></li><li><strong>类是对象的模板，对象是类的实体</strong></li></ul><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><ul><li><p><strong>定义格式</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    <span class="token comment" spellcheck="true">// 成员方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>定义类</strong>：就是定义类的成员，包括<strong>成员变量</strong>和<strong>成员方法</strong>。</li><li><strong>成员变量</strong>：和以前的定义几乎一样，只不过是位置发生了改变。成员变量的定义<strong>在类中，方法外</strong></li><li><strong>成员方法</strong>：和以前的定义几乎一样，只不过<strong>把 <code>static</code> 去掉</strong>，<code>static</code> 的作用见后。</li></ul><p>举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//年龄</span>    <span class="token comment" spellcheck="true">// 成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭！！！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉！！！！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习！！！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用</strong></p><ol><li><p>导包</p><p>指出所需要使用的类在什么位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> 包名称<span class="token punctuation">.</span>类名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建格式：</p><pre class="line-numbers language-java"><code class="language-java">类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用分为两种</p><ul><li>使用成员变量：对象名.成员变量;</li><li>使用成员方法：对象名.成员方法名(参数);</li></ul></li></ol></li></ul><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><ul><li><p>创建对象</p><pre class="line-numbers language-java"><code class="language-java">类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用对象访问类中的成员：</p><pre class="line-numbers language-java"><code class="language-java">对象名<span class="token punctuation">.</span>成员变量<span class="token punctuation">;</span>对象名<span class="token punctuation">.</span>成员方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>一个对象的内存图</p><p><img src="https://i.loli.net/2021/05/19/QhZzT3XcNn4FDtu.png" alt="Java类的内存图"></p></li><li><p>两个对象的内存图</p><p><img src="https://i.loli.net/2021/05/19/HIJmjO9CBr78xZM.png" alt="两个对象的内存"></p></li><li><p>两个引用指向同一个对象内存</p><p><img src="https://i.loli.net/2021/05/19/eATGRybgHkm1pUM.png" alt="两个引用指向同一个对象内存"></p></li><li><p>使用对象类型作为方法的参数</p><p><img src="https://i.loli.net/2021/05/19/S4WdGagJNYvyR3H.png" alt="使用对象类型作为方法的参数"></p></li><li><p>使用对象类型作为方法的返回值</p><p><img src="https://i.loli.net/2021/05/19/USxvTBQRtjE6k5G.png" alt="使用对象类型作为方法的返回值"></p></li></ul><h2 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h2><ol><li><strong>定义的位置不同</strong><ul><li>局部变量：在方法的内部</li><li>成员变量：在方法的外部，在类之中</li></ul></li><li><strong>作用范围不一样</strong><ul><li>局部变量：只有在方法中才可以使用，方法之外不能用</li><li>成员变量：整个类都可以用</li></ul></li><li><strong>默认值不一样</strong><ul><li>局部变量：没有默认值，如果想使用，必须手动赋值</li><li>成员变量：如果没有赋值，会有默认值，规则见前</li></ul></li><li><strong>内存位置不一样</strong><ul><li>局部变量：位于栈内存</li><li>成员变量：位于堆内存</li></ul></li><li><strong>生命周期不一样</strong><ul><li>局部变量：随着方法进栈而诞生，随着方法出栈而消失</li><li>成员变量：随着对象创建而诞生，随着垃圾回收（ JVM 控制）而消失</li></ul></li></ol><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。 封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的 方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。 </p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>将<strong>属性隐藏</strong>起来，若需要访问某个属性，<strong>提供公共方法</strong>对其访问。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>使用 <code>private</code> 关键字来修饰成员变量。</li><li>对需要访问的成员变量，提供对应的一对 <code>getter</code> 方法 、 <code>setter</code> 方法。 </li></ol><h2 id="封装的操作——-private-关键字"><a href="#封装的操作——-private-关键字" class="headerlink" title="封装的操作—— private 关键字"></a>封装的操作—— <code>private</code> 关键字</h2><h3 id="privte-的含义"><a href="#privte-的含义" class="headerlink" title="privte 的含义"></a><code>privte</code> 的含义</h3><ol><li><p> <code>private</code> 是一个权限修饰符，代表最小权限</p></li><li><p>可以修饰成员变量和成员方法。 </p></li><li><p>被private修饰后的成员变量和成员方法，只在本类中才能访问。</p><p>正因为用 <code>private</code> 修饰之后超出本类范围之外就不能直接访问了，所以需要间接的方法——定义一对 <code>getter</code> 方法 、 <code>setter</code> 方法。</p><p>这样做的好处是，可以在 <code>getter</code> 方法 、 <code>setter</code> 方法中<strong>添加其他代码来对传入的内容审核</strong>，保证了代码的安全性</p></li></ol><h3 id="private-的使用格式"><a href="#private-的使用格式" class="headerlink" title="private 的使用格式"></a><code>private</code> 的使用格式</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> 数据类型 变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>使用 <code>private</code> 修饰成员变量，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，我今年"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这个成员方法，专门用于向 age 设置数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数错误！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这个成员方法，专门用于获取 age 的数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <code>age</code> 被 <code>private</code> 修饰了，所以在其他类中不能直接访问。</p><p>在其他类中要想访问，必须通过 <code>setAge</code> 和 <code>getAge()</code> 来间接赋值和访问。</p><p>这里在 <code>setAge</code> 方法中还添加了判断 <code>age</code> 设置是否合理的代码，保证了代码的有效性。</p></li><li><p>使用 <code>setXxx</code> 和 <code>getXxx</code> 来赋值和访问 <code>private</code> 修饰的变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> Person<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoPerson</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"王祖贤"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        person.age = 18; // 直接访问 private 内容是错误写法</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意：</strong></p><ul><li><p>对于 <code>boolean</code> 值，<code>Getter</code> 方法一定要写成 <code>isXxx</code> 的形式，而 <code>setXxx</code> 不变</p></li><li><p>当方法的局部变量和成员变量重名的时候，根据就近原则，优先使用局部变量。</p><p>如果需要访问本类中的成员变量，需要使用格式：this.成员变量名</p><p>通过谁调用的方法，谁就是 this</p></li></ul></li></ol><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p>构造方法不能通过普通方法以 ” . “ 的形式来使用，只能以 <code>new</code> 的方法使用</p></li><li><p>当一个对象被创建时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</p></li><li><p>无论你与否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个无参数构造方法， 一旦自己定义了构造方法，Java<strong>自动提供的默认无参数构造方法</strong>就会失效。 </p></li><li><p>前面使用 <code>new</code> 来创建一个新的对象的时候，就使用了自动提供的默认的无参数构造方法</p><pre class="line-numbers language-java"><code class="language-java">Student xiaohong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h4><pre class="line-numbers language-java"><code class="language-java">修饰符 构造方法名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>构造方法的写法上，方法名与它所在的类名相同。它没有返回值，所以不需要返回值类型，不需要 void。使用构造方法后，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Student<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>name<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;无参数构造方法 &amp;nbsp;&amp;nbsp;</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;有参数构造方法 &amp;nbsp;&amp;nbsp;</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Student</span><span class="token punctuation">(</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>name<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>name<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义一个标准的类（Java-Bean）"><a href="#定义一个标准的类（Java-Bean）" class="headerlink" title="定义一个标准的类（Java Bean）"></a>定义一个标准的类（Java Bean）</h3><p>一个标准的类通常拥有下面四个组成部分：</p><ol><li><p>所有的成员变量都要使用 private 关键字修饰</p></li><li><p>为每一个成员变量编写一对 Getter/Setter 方法</p></li><li><p>编写一个无参数的构造方法</p></li><li><p>编写一个全参数的构造方法</p></li></ol><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li>使用 <code>API</code> 帮助文档<ol><li>打开帮助文档</li><li>点击显示，找到索引，看到输入框。</li><li>在输入框里输入需要寻找的关键字，然后回车。 </li><li>. 看包。java.lang下的类不需要导包，其他需要。</li><li>看类的解释和说明。</li><li>学习构造方法</li></ol></li></ul><h1 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h1><ul><li><p>示例代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*键盘输入两个数，并进行求和。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerSum</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的两个数分别是："</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"他们的和是："</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>没有变量名的对象                            </p><p>创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。虽然是创建对象的简化写法，但是应用 场景非常有限</p><p>匿名对象只能使用一次</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> 类名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引用场景"><a href="#引用场景" class="headerlink" title="引用场景"></a>引用场景</h3><ol><li><p>创建匿名对象直接调用方法，没有变量名。</p></li><li><p>匿名对象可以作为方法的参数和返回值</p><ul><li><p>例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> Anonymous<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Anonymous</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 普通方式</span><span class="token comment" spellcheck="true">//        Scanner sc = new Scanner(System.in);</span><span class="token comment" spellcheck="true">//        int num = sc.nextInt();</span>        <span class="token comment" spellcheck="true">// 匿名对象的方式</span><span class="token comment" spellcheck="true">//        int num = new Scanner(System.in).nextInt();</span><span class="token comment" spellcheck="true">//        System.out.println("输入的数字是：" + num);</span>        <span class="token comment" spellcheck="true">// 使用一般方法传入参数</span><span class="token comment" spellcheck="true">//        Scanner sc = new Scanner(System.in);</span><span class="token comment" spellcheck="true">//        methodParam(sc);</span>        <span class="token comment" spellcheck="true">// 使用匿名对象来进行传参</span><span class="token comment" spellcheck="true">//        methodParam(new Scanner(System.in));</span>        <span class="token comment" spellcheck="true">// 使用匿名对象作为返回值</span>        Scanner sc <span class="token operator">=</span> <span class="token function">methodReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的参数是："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodParam</span><span class="token punctuation">(</span>Scanner sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数字是："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Scanner <span class="token function">methodReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h1 id="Random-类"><a href="#Random-类" class="headerlink" title="Random 类"></a>Random 类</h1><ul><li><p>举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> Random<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuessNum</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println("电脑给出的数字是：" + num1);</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"选一个0 ~ 100 之间的数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你猜的数字是："</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token function">isclose</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isclose</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你猜的数字小了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜你，你才猜了"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"就次猜对了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你猜的数字大了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="ArrayList-类"><a href="#ArrayList-类" class="headerlink" title="ArrayList 类"></a>ArrayList 类</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>数组的长度是不可以发生改变的，但<code>java.util.ArrayList</code> 是大小可变的数组的实现，存储在内的数据称为元素。此类提供一些方法来操作内部存储 的元素。 <code>ArrayList</code> 中可不断添加元素，其大小也自动增长。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li><p>创建一个 <code>String</code> 类型的 <code>ArrayList</code> :</p><pre class="line-numbers language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;E&gt;</code> ，表示一种指定的数据类型，叫做泛型。 <code>E</code> ，取自 <code>Element</code>（元素）的首字母。在出现 <code>E</code> 的地方，我们使用一种<strong>引用数据类型</strong>将其替换即可，表示我们将存储哪种引用类型的元素。</p><p>从 JDK 1.7 + 开始，<strong>右侧的尖括号内部可以不写内容，但是 &lt;&gt; 本身需要写</strong></p><pre class="line-numbers language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>常用方法</p><ol><li><code>public boolean add(E e)</code> ：将指定的元素添加到此集合的尾部。 </li><li><code>public E remove(int index)</code> ：移除此集合中指定位置上的元素。返回被删除的元素。 </li><li><code>public E get(int index)</code> ：返回此集合中指定位置上的元素。返回获取的元素。</li><li><code>public int size()</code> ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</li></ol></li></ul><h2 id="如何存储基本数据类型"><a href="#如何存储基本数据类型" class="headerlink" title="如何存储基本数据类型"></a>如何存储基本数据类型</h2><p><code>ArrayList</code> 对象不能存储基本类型，只能存储引用类型的数据。类似 <code> &lt;int&gt;</code>  不能写，但是存储基本数据类型对应的包装类型是可以的。所以，想要存储基本类型数据， <code>&lt;&gt;</code> 中的数据类型，必须<strong>转换后才能编写</strong>，转换写法如下：</p><table><thead><tr><th align="center">基本类型</th><th align="center">基本包装类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><p>从 <code>JDK 1.5+</code> 开始，支持自动装箱、自动拆箱</p><ul><li>自动装箱： 基本类型 ————&gt; 包装类型</li><li>自动拆箱： 包装类型 ————&gt; 基本类型</li></ul><p>例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05ArrayListBasic</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> listA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 错误写法，因为集合里面保存的都是地址值，而基本数据类型没有地址值</span><span class="token comment" spellcheck="true">//        ArrayList&lt;int> listB = new ArrayList&lt;int>();</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> listB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listB<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listB<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listB<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listB<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> listB<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第零号元素是："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>ArrayList</code> 既可以作为参数传入，也可以作为参数传出：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07ArrayListReturn</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> listA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Random rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原集合是："</span> <span class="token operator">+</span> listA<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList listB <span class="token operator">=</span> <span class="token function">iseven</span><span class="token punctuation">(</span>listA<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"由其中的偶数组成的集合是："</span> <span class="token operator">+</span> listB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ArrayList <span class="token function">iseven</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> listB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                listB<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> listB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.String</code> 类代表字符串。Java 程序中所有的字符串文字（例如 <code>"abc"</code> ）都可以被看作是<strong>实现此类的实例。</strong><br>类 <code>String</code> 中包括用于检查各个字符串的方法，比如用于<strong>比较</strong>字符串，<strong>搜索</strong>字符串，<strong>提取</strong>子字符串以及创建具有翻译为<strong>大写</strong>或<strong>小写</strong>的所有字符的字符串的副本</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>字符串不变：字符串的值在创建后不能被更改。</p><pre class="line-numbers language-java"><code class="language-java">String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>s1<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"abc"</span><span class="token punctuation">;</span> s1<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">+=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"d"</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;"abcd"&amp;nbsp; </span><span class="token comment" spellcheck="true">//&amp;nbsp;内存中有"abc"，"abcd"两个对象，s1从指向"abc"，改变指向，指向了"abcd"。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>因为 <code>String</code> 对象是不可变的，所以它们可以被共享以节约内存</p><pre class="line-numbers language-java"><code class="language-java">String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>s1<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"abc"</span><span class="token punctuation">;</span> String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>s2<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;nbsp;内存中只有一个"abc"对象被创建，同时被s1和s2共享。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字符串效果上相当于是 <code>char[]</code> 字符数组，最底层原理是 <code>byte[]</code> 字节数组。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 例如：&amp;nbsp; </span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>str<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于：&amp;nbsp; char&amp;nbsp;data[]&amp;nbsp;=&amp;nbsp;{'a',&amp;nbsp;'b',&amp;nbsp;'c'};&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>str<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;nbsp;String底层是靠字符数组实现的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><code>public String()</code> ：初始化新创建的 <code>String</code> 对象，以使其表示空字符序列。</li><li><code>public String(char[] value)</code> ：通过当前参数中的字符数组来构造新的 <code>String</code>。 </li><li><code>public String(byte[] bytes)</code> ：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的 <code>String</code> 。</li><li>String str = “abc”  ：直接写上双引号，就是字符串对象（Jvm 帮你 new）。</li></ul><h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><ul><li>字符串常量池：程序当中直接写上的双引号字符串，就在字符串常量池中。<ul><li>对于基本类型来说，== 是进行数值的比较</li><li>对于引用类型来说，== 是进行地址值的比较</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02StringPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true str1 的地址值和 str2 的地址值一样</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//false str3 的地址值和 str2 的地址值不一样</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//false str1 的地址值和 str3 的地址值不一样</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/05/19/Hcf3SRjbdgAZqoF.png" alt="StringPool内存"></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><p><strong>字符串比较</strong></p><p><code>==</code>  是进行对象的地址值比较，如果确实需要字符串的内容比较，可以使用两个方法</p><ul><li><p>public boolean equals(Object obj)：</p><p>参数可以是任何对象，只有参数是一个字符串并且内容相同才会返回 true</p></li><li><p>public boolean equalsIgnoreCase(String str)：</p><p>忽略大小写，进行内容比较</p></li></ul><p><strong>注意</strong>：</p><ol><li>任何对象都能使用 Object 进行接收。</li><li>如果比较双方一个是常量一个是变量，推荐把字符常量字符串写在前面。</li></ol></li><li><p><strong>字符串获取</strong></p><ul><li><code>public int length ()</code> ：返回此字符串的长度。 </li><li><code>public String concat (String str)</code> ：将指定的字符串连接到该字符串的末尾。 </li><li><code>public char charAt (int index) </code>：返回指定索引处的 char值。 </li><li><code>public int indexOf (String str)</code> ：返回指定子字符串第一次出现在该字符串内的索引，如果没有返回 -1。 </li><li><code>public String substring (int beginIndex)</code> ：返回一个子字符串，从beginIndex开始截取字符串到字符 串结尾。 </li><li><code>public String substring (int beginIndex, int endIndex)</code>：返回一个子字符串，从beginIndex到 endIndex截取字符串。含beginIndex，不含endIndex</li></ul></li><li><p><strong>字符串转换</strong></p><ul><li><p><code>public char[] toCharArray()</code>：将当前字符串拆分成为字符数组作为返回值</p></li><li><p><code>public byte[] getBytes()</code>：获取当前字符串底层的字节数组</p></li><li><p><code>public String replace(CharSequence oldString, CharSequence newString)</code>：</p><p>将所有出现的老字符串替换成新的字符串，返回替换后的结果新字符串</p></li></ul><p><strong>备注</strong>：CharSequence 意思就是可以接受字符串类型</p></li><li><p><strong>字符串的分割</strong></p><ul><li>public String[] split(String regex)：按照参数的规则，将字符串切分成为若干部分</li></ul><p><strong>注意事项</strong>：</p><ol><li>split 方法的参数其实是一个”正则表达式”。要注意：如果按照英文句点 “.” 进行切分，必须写 “\\.” （两个反斜杠）</li></ol></li></ol><h1 id="Static-关键字"><a href="#Static-关键字" class="headerlink" title="Static 关键字"></a>Static 关键字</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul><li><p><code>static</code> 是属于类的，这样所有的成员都可以共享使用，这样不仅节省内存，而且便于后期修改：</p><p><img src="https://i.loli.net/2021/05/19/4F8YlBHwAdEbrP5.png" alt="Static引入"></p></li></ul><h2 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h2><p>关于 <code>static</code> 关键字的使用，它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属 于某个对象的。也就是说，既然属于类，就可以不靠创建对象来调用了。</p><h2 id="定义和使用格式"><a href="#定义和使用格式" class="headerlink" title="定义和使用格式"></a>定义和使用格式</h2><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>当 <code>static</code> 修饰成员变量时，该变量称为<strong>类变量</strong>。该类的每个对象都共享同一个类变量的值。任何对象都可以更改 该类变量的值，但也可以在不创建该类的对象的情况下对类变量进行操作。</p><p>定义格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> 数据类型 变量名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例;</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> numberID<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用举例;</p><p>比如，对于一个班级来说，每个学生对象都有自己的名字，年龄，学号等，但他们所属的教室却是相同的、静态的，因此，可以在类里定义一个静态变量 <code>room</code> 来存放这类学生的教室。</p><p>另外，从第一名同学开始，<code>id</code> 为 1，以此类推。学号必须是唯一的，连续的，并且与班级的人数相符，这样以便知道，要分配给下一名新同学的学号是多少。这样我们就需要一个变量，与单独的每一个学生对象无关，而是与整个班级同学数量有关。所以，我们可以定义一个静态变量 <code>idCounter</code> ，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> Static<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 学号</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 年龄</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> idCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 学号计数器，每当 new 了一个新对象，计数器加一</span>    <span class="token keyword">static</span> String room<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所在教室</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>idCounter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>idCounter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Gerter &amp; Seter 方法....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>当 <code>static</code> 修饰成员方法时，该方法称为<strong>类方法</strong> 。静态方法在声明中有 <code>static</code> ，建议使用类名来调用，而不需要 创建类的对象。</p><p>定义格式:</p><pre class="line-numbers language-java"><code class="language-java">修饰符 <span class="token keyword">static</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行语句</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例：在 <code>Student</code> 类中定义静态方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：</strong></p><ol><li>静态方法只能访问静态成员。</li><li>静态方法可以直接访问类变量和静态方法。</li><li>静态方法不能直接访问普通成员变量或成员方法。反之，成员方法可以直接访问类变量或静态方法。 </li><li>静态方法中，不能使用 <code>this</code> 关键字。</li></ol><h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><p>被 <code>static</code> 修饰的成员可以并且建议直接通过<strong>类名直接访问</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//&amp;nbsp;访问类变量 </span>类名<span class="token punctuation">.</span>类变量名； <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;nbsp;调用静态方法 </span>类名<span class="token punctuation">.</span>静态方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码演示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> Static<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*注意事项:1. 静态不能直接访问非静态原因：在内存当中是【先有】的静态内容，【后有】的非静态内容。2. 静态方法中不能使用 this。原因：this 代表当前对象，通过谁调用的方法，谁就是当前对象。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02StaticMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyClass one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 首先创建对象</span>        <span class="token comment" spellcheck="true">// 然后才能使用没有 static 关键字的内容</span>        one<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对于静态方法来说，可以通过对象名进行调用（可以，但没必要）</span>        <span class="token comment" spellcheck="true">// 也可以直接通过类名称来调用</span>        one<span class="token punctuation">.</span><span class="token function">methodStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确，但不推荐。</span>        <span class="token comment" spellcheck="true">// 这种写法在编译之后也会被 javac 翻译成为类名称.静态方法名</span>        MyClass<span class="token punctuation">.</span><span class="token function">methodStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确且推荐</span>        <span class="token comment" spellcheck="true">// 对于本类当中的静态方法，可以省略类名称</span>        <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo02StaticMethod<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 完全等效</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是自己的方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态原理图解"><a href="#静态原理图解" class="headerlink" title="静态原理图解"></a>静态原理图解</h2><p><img src="https://i.loli.net/2021/05/19/2RPAKTGDceWsaCH.png" alt="static内存"></p><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> Static<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*静态代码块的格式是:public class 类名称{    static{        // 静态代码块的内容    }} */</span><span class="token comment" spellcheck="true">// 特点：当第一次使用到本类时，静态代码块执行唯一的一次。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块执行！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法执行！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> Static<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// 静态内容总是优先于非静态，所以静态代码块比构造方法先执行</span><span class="token comment" spellcheck="true">// 静态代码块的典型用途：</span><span class="token comment" spellcheck="true">// 用来一次性地对静态成员变量进行赋值</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Static</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h1><h2 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Arrays</code> 此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法，调用起来 非常简单</p><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>public static String toString(数组)</code>：将参数数组变成字符串（按照[元素1，元素2，…]）</li><li> <code>public static void sort(数组)</code>：按照默认升序对数组的元素进行排序</li></ul><p>备注：</p><ol><li>如果是数值，sort 默认按照升序从小到大</li><li>如果是字符串，sort 默认按照字母升序</li><li>如果是自定义的类型，那么这个自定义的类型需要有 Comparable 或者 Comparator 接口。</li></ol><h1 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h1><h2 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.Math</code> 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具 类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。 </p><h2 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>public static double abs(double num)</code>：获取绝对值</li><li><code>public static double ceil(double num)</code>：向上取整</li><li><code>public static double floor(double num)</code>：向下取整</li><li><code>public static long round(double num)</code>：四舍五入</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h2><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要 继承那一个类即可。继承主要解决的问题就是：<strong>共性抽取</strong></p><p><img src="https://i.loli.net/2021/05/19/bZOTEmFv78XR5lw.png" alt="继承引入"></p><p>继承描述的是事物之间的所属关系，这种关系是： <code>is-a</code> 的关系。例如，父类是员工，子类是讲师，那么“讲师就是一个员工”。关系：<code>is-a</code>。可见，父类更通用，子类更具体。通过继承，可以使多种事物之间形成一种关系体系。 </p><ul><li><strong>继承：</strong>就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接 访问父类中的<strong>非私有</strong>的属性和行为。 </li></ul><h2 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h2><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>父类<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&amp;nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>子类<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>父类<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&amp;nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="继承后的特点——成员变量"><a href="#继承后的特点——成员变量" class="headerlink" title="继承后的特点——成员变量"></a>继承后的特点——成员变量</h2><ul><li><p>父类与子类定义的成员变量<strong>不重名</strong>时，访问是<strong>没有任何影响的</strong>，即子类可以轻松地访问定义在父类中的成员变量，因为此时每一个变量都是唯一可识别的。</p></li><li><p>父类与子类定义的成员变量<strong>重名</strong>时，访问是有影响的。</p><p>这是因为在子类中访问成员变量时，总是<strong>先从本类中找是否有此变量，没有在向上（父类）找</strong>。</p><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用 super 关键字，修饰 父类成员变量，类似于之前学过的 <code>this</code> 。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodZi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为本类当中有 num，所以这里用的是本类的 num。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>      int num = 30;      System.out.println(num);    // 30 局部变量      System.out.println(this.num);   // 50 本类的成员变量      System.out.println(super.num);  // 100 父类的成员变量  }</code></pre><p>  }</p><pre><code>## 继承后的特点——成员方法* 父类与子类定义的成员方法**不重名**时。这是的调用是**没有任何影响的**。对象调用方法时，会在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。```javaclass&nbsp;Fu{     public&nbsp;void&nbsp;show(){        System.out.println("Fu类中的show方法执行");    }}class&nbsp;Zi&nbsp;extends&nbsp;Fu{    public&nbsp;void&nbsp;show2(){        System.out.println("Zi类中的show2方法执行");    }} public&nbsp;&nbsp;class&nbsp;ExtendsDemo04{    public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{        Zi&nbsp;z&nbsp;=&nbsp;new&nbsp;Zi();        //子类中没有show方法，但是可以找到父类方法去执行        z.show();    // Fu类中的show方法执行        z.show2();    // Zi类中的show2方法执行    }}</code></pre><ul><li><p>父类与子类定义成员方法<strong>重名</strong>时。叫做<strong>方法重写（Override）</strong>。</p><ul><li><p><strong>方法重写</strong>：在继承关系中，方法的名称一样，参数列表也一样。也叫覆盖、覆写。<strong>声明不变，重新实现</strong>。</p></li><li><p><strong>注意事项</strong>：</p><ol><li>保证父子间方法名称相同，参数列表也相同。可用 <code>@Override</code>写在方法前面，用来检测是不是有效的正确覆盖重写。</li><li>类方法的返回值必须<strong>小于等于</strong>父类方法的返回值范围。<br>如：<code>java.lang.Object</code> 类是所有类的公共最高父类<pre><code>    `java.lang.String` 就是 Object 的子类</code></pre></li><li>类方法的权限必须<strong>大于等于</strong>父类方法的权限修饰符<pre><code>`public` &gt; `protected` &gt; `(default)` &gt; `private`备注：(`default`) 不是关键字 `default` ， 而是留空，什么都不写</code></pre></li></ol></li><li><p>应用场景：子类可以根据需要，定义特定于自己的行为。既沿袭了父类的功能名称，又根据子类的需要重新实现父类方法，从 而进行扩展增强。比如新的手机增加来电显示头像的功能，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Phone<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">showNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"来电显示号码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//智能手机类</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>NewPhone<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Phone<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重写父类的来电显示号码功能，并增加自己的显示姓名和图片功能</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">showNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用父类已经存在的功能使用super</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增加自己特有显示姓名和图片功能</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示来电姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示头像"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>ExtendsDemo06<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;创建子类对象</span>        NewPhone<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>np<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">NewPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；            <span class="token comment" spellcheck="true">//&amp;nbsp;调用父类继承而来的方法</span>            np<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用子类重写的方法</span>        np<span class="token punctuation">.</span><span class="token function">showNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="继承后的特点——构造方法"><a href="#继承后的特点——构造方法" class="headerlink" title="继承后的特点——构造方法"></a>继承后的特点——构造方法</h2><p>继承关系中，父子类构造方法的访问特点：</p><ol><li>子类构造方法中有一个隐含的 super() 调用，所以一定是先调用的父类构造，后执行的子类构造</li><li>子类构造可以通过 super 关键字来父类重载构造</li><li><code>super</code> 的父类构造调用，必须是子类构造方法的第一个语句，不能一个子类构造调用多次 <code>super</code> 构造</li></ol><p>总结</p><ul><li>子类必须调用父类构造方法，不写则赠送 super()；写了则用指定的 super(参数) 调用</li><li><code>super</code> 只能有一个，还必须在第一句</li></ul><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类无参构造方法！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Fu</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类有参构造方法！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> Override<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*在子类继承父类时，执行子类构造方法时，默认是会执行父类无参构造方法的如果父类中写了有参构造方法，而没有写无参构造方法，在子类中写无参构造方法时会报错    此时的解决方法是要么在父类中写一个无参构造方法，要么在写子类构造方法时手动执行 super(参数) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        super();    // 在调用父类无参构造方法</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在调用父类重载的构造方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类构造方法！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        super();  // 错误写法！只有子类构造方法才能调用父类构造方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="super-和-this-关键字"><a href="#super-和-this-关键字" class="headerlink" title="super 和 this 关键字"></a>super 和 this 关键字</h2><ul><li><p><strong><code>super</code>**：用来访问父类内容。代表</strong>父类的存储空间标识**(可以理解为父亲的引用)。 </p><p>用法有三种：</p><ol><li>在子类的成员方法中，访问父类的成员变量。</li><li>在子类的方法成员中，访问父类的成员方法。</li><li> 在子类的构造方法中，访问父类的构造方法。</li></ol></li><li><p><strong><code>this</code>**：用来访问本类内容。代表当</strong>前对象的引用**(谁调用就代表谁)。 </p><p>用法有三种：</p><ol><li>在本类的成员方法中，访问本类的成员变量。</li><li>在本类的成员方法中，访问本类的另一个成员方法（强调不是继承自父类的方法）。</li><li>在本类的构造方法中，访问本类的另一个构造方法。(必须是构造方法的第一个语句，且是唯一一个)</li></ol></li></ul><p><code>this</code> 示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 本类的无参构造，调用本类的有参构造</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Zi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 局部变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 本类中的成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 父类中的成员变量</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存关系：<img src="https://i.loli.net/2021/05/19/D89aVUjFxZ2PgCc.png" alt="SuperThis内存"></p><h2 id="Java-中继承的特点"><a href="#Java-中继承的特点" class="headerlink" title="Java 中继承的特点"></a>Java 中继承的特点</h2><ul><li><code>Java</code> 只支持单继承，不支持多继承（最多只能有一个直接父类）。</li><li><code>Java</code> 支持多层继承。（顶层父类是 <code>Object</code> 类。所有的类默认继承 <code>Object</code> 作为父类）。</li><li><code>Java</code> 中一个子类的直接父类是唯一的，但是一个父类可以拥有很多个子类。</li></ul><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="引入-2"><a href="#引入-2" class="headerlink" title="引入"></a>引入</h2><p>如果父类当中的方法不确定如何进行方法体<strong>具体</strong>实现，那么这就是一个<strong>抽象方法</strong>。</p><p>如父类是图形，其中有一个求面积的方法，子类包含正方形、圆形、三角形等众多形状，对于父类，没有办法写出统一的求面积的方法，对于每一个子类，重写自父类的求面积方法不尽相同，因此父类图形就是一个抽象类</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><strong>抽象方法</strong>：没有方法体的方法。</li><li><strong>抽象类</strong>：包含抽象方法的类。</li></ul><h2 id="abstract-使用格式"><a href="#abstract-使用格式" class="headerlink" title="abstract 使用格式"></a>abstract 使用格式</h2><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>使用 <code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>定义格式;</p><pre class="line-numbers language-java"><code class="language-java">修饰符 <span class="token keyword">abstract</span> 返回值类型 方法名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h3><p>如果一个类包含抽象方法，那么该类必须是抽象类。</p><p>代码举例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="抽象的使用"><a href="#抽象的使用" class="headerlink" title="抽象的使用"></a>抽象的使用</h3><p>继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。除非，该子类也为抽象类。最终，必须有子类实现该父类的抽象方法，否则，从最初的父类到最终的子类都不能创建对象，失去意义。</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p>关于抽象类的使用，以下为语法上需要注意的细节，着重注意理解抽象的本质：</p><ol><li><p>抽象类<strong>创建对象</strong>，如果创建，编译无法通过而报错，只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造的方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类构造方法中，有默认的 <code>super()</code> ，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。</p><blockquote><p>理解：假设不重写所有抽象方法，则子类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li></ol><p>下面这个例子中，最高类是 Animal ，其子类 Dog 继承了该抽象类，只重写了一个抽象方法，然后再有 DogGolden 和 Dog2Ha 继承 Dog ，重写了 Dog 类里面继承自 Animal 的抽象方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 子类也是一个抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我爱吃骨头！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DogGolden</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉呼呼呼~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog2Ha</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉嘿嘿嘿~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03AnimalDog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dog2Ha ha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog2Ha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ha<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 我爱吃骨头！</span>        ha<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 睡觉嘿嘿嘿~~~</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DogGolden golden <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DogGolden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        golden<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 我爱吃骨头！</span>        golden<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 睡觉呼呼呼~~~</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="继承的综合案例"><a href="#继承的综合案例" class="headerlink" title="继承的综合案例"></a>继承的综合案例</h1><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><p>群主发普通红包。某群有多名成员，群主给成员发普通红包。普通红包的规则：</p><ol><li>群主的一笔金额，从群主余额中扣除，平均分成 n 等分，让成员领取。</li><li>成员领红包后，保存到成员余额中。</li></ol><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p><img src="https://i.loli.net/2021/05/19/CcIQktiaebAM8GY.png" alt="红包案例分析"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 余额，当前用户拥有的钱数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"我的余额是："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// super();</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> totalMoney<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首先需要一个集合，用来存储若干金额的红包</span>        ArrayList redlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 首先看一下群主有多少钱</span>        <span class="token keyword">int</span> leftMoney <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 群主当前余额</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalMoney <span class="token operator">></span> leftMoney<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> redlist<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回空集合</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 扣钱，重新设置余额</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>leftMoney <span class="token operator">-</span> totalMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发红包需要平均拆分成 count 份</span>        <span class="token keyword">int</span> avg <span class="token operator">=</span> totalMoney <span class="token operator">/</span> count<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> totalMoney <span class="token operator">%</span> count<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 零头</span>        <span class="token comment" spellcheck="true">// 除不开的零头放在最后一个红包中</span>        <span class="token comment" spellcheck="true">// 下面把红包一个一个放在集合中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 最后 一个红包</span>        left <span class="token operator">+=</span> avg<span class="token punctuation">;</span>        redlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redlist<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Member</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Member</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从众多红包中抽取一个给自己</span>        <span class="token comment" spellcheck="true">// 随机获取一个集合当中的索引编号</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据索引，从集合中删除，并且得到被删除的红包给自己</span>        <span class="token keyword">int</span> rmoney <span class="token operator">=</span>  list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前成员自己有多少钱</span>        <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重新设置回去</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>rmoney <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainRedPacket</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Manager manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"群主"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Member one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token string">"成员A"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Member two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token string">"成员B"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Member three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token string">"成员C"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        three<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 群主总共发 20 块钱，分成三个红包</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> redList <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 三个普通成员收红包</span>        one<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>redList<span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>redList<span class="token punctuation">)</span><span class="token punctuation">;</span>        three<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>redList<span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        three<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h2><p>接口，是 Java 语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么 接口的内部主要就是<strong>封装了方法</strong>，包含常量和抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法 （JDK 9）。</p><p>接口的定义，它与定义类方式相似，但是使用 interface 关键字。它也会被编译成.class文件，但一定要明确它并 不是类，<strong>而是另外一种引用数据类型</strong>。</p><blockquote><p>引用数据类型：数组、类、接口。</p></blockquote><p>接口不能创建对象，但是可以被实现（ <code>implements</code> ，类似于被继承）。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象类。 </p><h2 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名称 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象方法</span>    <span class="token comment" spellcheck="true">// 默认方法</span>    <span class="token comment" spellcheck="true">// 静态方法</span>    <span class="token comment" spellcheck="true">// 私有方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="含有抽象方法"><a href="#含有抽象方法" class="headerlink" title="含有抽象方法"></a>含有抽象方法</h3><p>抽象方法：使用 <code>abstract</code> 关键字修饰，可以省略，没有方法体。该方法供子类实现使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>InterFaceName<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="含有默认方法和静态方法"><a href="#含有默认方法和静态方法" class="headerlink" title="含有默认方法和静态方法"></a>含有默认方法和静态方法</h3><p>默认方法：使用 <code>default</code> 修饰，不可省略，供子类调用或者子类重写。 </p><p>静态方法：使用 static 修饰，不可省略，供接口直接调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>InterFaceName<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;执行语句</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;执行语句</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现概述"><a href="#实现概述" class="headerlink" title="实现概述"></a>实现概述</h2><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类 似继承，格式相仿，只是关键字不同，实现使用 <code>implements</code> 关键字。<br>非抽象子类实现接口：</p><ol><li>必须重写接口中所有抽象方法。</li><li>继承了接口的默认方法，即可以直接用，也可以重写。</li></ol><p>实现格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口名<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重写接口中抽象方法【必须】</span>    <span class="token comment" spellcheck="true">// 重写接口中默认方法【可选】</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象方法-1"><a href="#抽象方法-1" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>定义接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LiveAble</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这是一个抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>定义接口时，<code>public abstract</code> 可以选择性地全部或部分省略。最简化即可写成<code>返回值类型 方法名称();</code></p></blockquote><p>定义实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LiveAble<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"晚上睡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>InterfaceDemo<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;创建子类对象</span>        Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用实现后的方法</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：吃东西晚上睡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>可以继承，可以重写，二选一（实现类中没有重写则默认继承），但是只能通过实现类的对象来调用。</p><ol><li><p><strong>继承默认方法</strong>，代码：</p><p>定义接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LiveAble<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天上飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LiveAble<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;没有对默认方法重写，则自动继承</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>InterfaceDemo<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;创建子类对象</span>        Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用默认方法</span>        a<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：天上飞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>重写默认方法</strong>，代码：</p><p>定义接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LiveAble<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天上飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LiveAble<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"地上跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>InterfaceDemo<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;创建子类对象</span>        Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用重写方法</span>        a<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：地上跑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态与 <code>.class</code> 文件相关，只能使用接口名调用，不可以通过实现类的类名或者实现类的对象调用，也就是常说的<strong>静态与对象无关</strong>，代码：</p><p>定义接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LiveAble<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑起来~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LiveAble<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;无法重写静态方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>InterfaceDemo<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;Animal.run();    //&amp;nbsp;【错误】无法继承方法,也无法调用</span>        LiveAble<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 【正确】直接通过接口名称调用静态方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：跑起来<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><ul><li>私有方法：只有默认方法可以调用</li><li>私有静态方法：默认方法和静态方法都可以调用。</li></ul><p>如果一个接口中有多个默认方法，并且方法中有重复的内容，那么可以抽取出来，封装到私有方法中，供默认方法 去调用。从设计的角度讲，<strong>私有的方法是对默认方法和静态方法的辅助</strong>。代码：</p><p>定义有私有方法的接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterfacePrivateA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodDefault1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    抽取代码，重复利用</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodDefault2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    抽取代码，重复利用</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义有私有静态方法的接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterfacePrivateB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodDefault1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    抽取代码，重复利用</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodDefault2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    抽取代码，重复利用</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>接口当中也可以定义“成员变量”，但是必须使用 <code>public static final</code> 三个关键字进行修饰。从效果上看，这其实就是接口的【常量】（一旦有 <code>final</code> 关键字就不可更改）。</p><p>接口当中的常量，<strong>必须进行赋值</strong>，接口中常量的名称使用完全的大写字母，用下划线进行分割（推荐）。</p><p>代码：</p><p>定义接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterfaceConst</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这其实就是一个常量，一旦赋值，就不可以修改</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUM_OF_MY_CLASS <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可以省略 public static final</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Interface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 访问接口中的常量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MyInterfaceConst<span class="token punctuation">.</span>NUM_OF_MY_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口的多实现"><a href="#接口的多实现" class="headerlink" title="接口的多实现"></a>接口的多实现</h2><p>之前学过，在继承体系中，一个类只能继承一个父类。而对于接口而言，<strong>一个类是可以实现多个接口的</strong>，这叫做接 口的<strong>多实现</strong>。并且，<strong>一个类能继承一个父类，同时实现多个接口</strong>。</p><p>实现格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>类名<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>父类名<span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>接口名<span class="token number">1</span><span class="token punctuation">,</span>接口名<span class="token number">2</span><span class="token punctuation">,</span>接口名<span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&amp;nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;重写接口中抽象方法【必须】</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;重写接口中默认方法【不重名时可选】</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[ ]：表示可选操作。</p></blockquote><h3 id="抽象方法-2"><a href="#抽象方法-2" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>接口中，有多个抽象方法时，实现类必须重写所有抽象方法。<strong>如果抽象方法有重名的，只需要重写一次</strong>。这很好理解，反正重名抽象方法在接口中都没有实现，因此在实现类中不存在冲突。代码如 下：</p><p>定义多个接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>A<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">showA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>B<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">showB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>C<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>A<span class="token punctuation">,</span>B<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">showA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">showB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"showB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认方法-1"><a href="#默认方法-1" class="headerlink" title="默认方法"></a>默认方法</h3><p>接口中，有多个默认方法时，实现类都可继承使用。如果<strong>默认方法有重名的，必须重写一次</strong>，因为产生了冲突。代码如下：</p><p>定义多个接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>A<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>B<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>C<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>A<span class="token punctuation">,</span>B<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法-1"><a href="#静态方法-1" class="headerlink" title="静态方法"></a>静态方法</h3><p>接口中，存在同名的静态方法并不会产生冲突，原因是只能通过各自接口名访问静态方法。</p><h3 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h3><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择<strong>执 行父类的成员方法</strong>。代码如下</p><p>定义接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>A<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAAAAAAAAAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义父类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>D<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DDDDDDDDDDDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义子类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>C<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>D<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">implements</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>A<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;未重写methodA方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Test<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        C<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>c<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果<span class="token operator">:</span>DDDDDDDDDDDD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h2><p>一个接口能继承另一个或者多个接口，这和类之间的继承比较相似。接口的继承使用 <code>extends</code> 关键字，子接口继 承父接口的方法。<strong>如果父接口中的默认方法有重名的，那么子接口需要重写一次</strong>。代码如下：</p><p>定义父接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterfaceA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterfaceB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">methodCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义子接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*这个子接口当中有【4】个方法。    methodA ———> 接口A    methodB ———> 接口B    methodCommon ————> 同时来源于接口 A 和 B    method ————> 来源于我自己注意事项：1. 多个父接口当中的抽象方法如果重复，没关系2. 多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写，【而且要带着 default 关键字】 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token keyword">extends</span> <span class="token class-name">MyInterfaceA</span><span class="token punctuation">,</span> MyInterfaceB<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">methodDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父接口默认方法冲突，重写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>子接口重写默认方法时，<code>default</code> 关键字可以保留</p><p>子接口重写默认方法时，<code>default</code> 关键字不保留</p></blockquote><h2 id="小总结及补充"><a href="#小总结及补充" class="headerlink" title="小总结及补充"></a>小总结及补充</h2><p>在 Java 9+ 版本中，接口内容可以有：</p><ol><li><p>成员变量其实是常量，格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">final</span><span class="token punctuation">]</span> 数据类型 常量名称 <span class="token operator">=</span> 数据值；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>常量必须进行赋值，而且一旦赋值不能改变。</li><li>常量名称完全大写，用下划线分割。</li></ul></li><li><p>接口中最重要的就是抽象方法，格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">abstract</span><span class="token punctuation">]</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>实现类必须覆盖重写所有的抽象方法，除非实现类是抽象类。</li></ul></li><li><p>从 Java 8开始，接口里允许定义默认方法（方便方法升级），格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token keyword">default</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 方法体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>默认方法也可以被覆盖重写</li></ul></li><li><p>从 Java 8开始，接口里允许定义静态方法，格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token keyword">static</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法</li></ul></li><li><p>从 Java 9开始，接口里允许定义私有方法，格式：</p><ul><li><p>普通私有方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>静态私有方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li><code>private</code> 的方法只有接口自己才能调用，不能被实现类或别人使用。</li></ul></li></ul><ol start="6"><li>接口中不允许有代码块。</li><li>接口中不允许有构造方法。</li></ol></li></ol><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h2><ul><li><p>引入</p><p>多态是继封装、继承之后，面向对象的第三大特性。<br>生活中，比如跑的动作，小猫、小狗和大象，跑起来是不一样的。再比如飞的动作，昆虫、鸟类和飞机，飞起来也是不一样的。可见，同一行为，通过不同的事物，可以体现出来的不同的形态。多态，描述的就是这样的状态。 </p></li><li><p>定义</p><p><strong>多态</strong>：是指同一行为，具有多个不同的表现形式。</p></li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol><li><p>继承或者实现（拥有父类或者父接口）【二选一】</p></li><li><p>方法的重写【意义体现：不重写，无多态，无意义】</p></li><li><p>父类引用指向子类对象</p></li></ol><h2 id="多态的体现"><a href="#多态的体现" class="headerlink" title="多态的体现"></a>多态的体现</h2><p>多态体现的格式：</p><pre class="line-numbers language-java"><code class="language-java">父类名称 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 子类名称<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里的父类名称专指子类对象继承的父类类型，或者实现类的父接口类型</p></blockquote><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">Fu one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>one<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法。</strong>也就是说，使用多态调用方法时：编译看左，执行看右</p><p><strong>当使用多态方式访问成员变量时</strong>，有两种方式：</p><ol><li>直接通过对象名称访问成员变量：<strong>看等号左边是谁，优先用谁，没有则向上找</strong>。</li><li>间接通过成员方法访问成员变量：<strong>看该方法属于谁优先用谁，没有则向上找</strong></li></ol><p>对比：</p><p>成员变量：编译看左边，运行还看左边<br>成员方法：编译看左边，运行看右边</p><h2 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h2><p>实际开发的过程中，父类类型作为方法形式参数，传递子类对象给方法，进行方法的调用，更能体现出多态的扩展性与便利。例如，我只关心一个父类下的子类运行某个方法，而不具体关心是哪个子类运行，而且父类下面的子类方法实现各不相同，这时使用多态就十分方便快捷。举例：</p><p>定义父类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义子类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Cat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Dog<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Test<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;多态形式，创建对象</span>        Cat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>c<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dog<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>d<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用showCatEat</span>        <span class="token function">showCatEat</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用showDogEat</span>        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">showDogEat</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;        以上两个方法,&amp;nbsp;均可以被showAnimalEat(Animal&amp;nbsp;a)方法所替代        而执行效果一致        */</span>        <span class="token function">showAnimalEat</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showAnimalEat</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>showCatEat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>Cat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>showDogEat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>Dog<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>showAnimalEat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于多态特性的支持，<code>showAnimalEat</code> 方法的 <code>Animal</code> 类型，是 <code>Cat</code> 和 <code>Dog</code> 的父类类型，父类类型接收子类对象，当 然可以把 <code>Cat</code> 对象和 <code>Dog</code> 对象，传递给方法。<br>当 <code>eat</code> 方法执行时，多态规定，执行的是子类重写的方法，那么效果自然与 <code>showCatEat</code> 、 <code>showDogEat</code> 方法一致， 所以 <code>showAnimalEat</code> 完全可以替代以上两方法。 不仅仅是替代，在扩展性方面，无论之后再多的子类出现，我们都不需要编写 <code>showXxxEat</code> 方法了，直接使用 <code>showAnimalEat</code> 都可以完成。<br>所以，多态的好处，体现在，可以使程序编写的更简单，并有良好的扩展。</p><h2 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h2><p>多态的转型分为向上转型与向下转型两种：</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><ul><li><p><strong>向上转型</strong>：多态本身就是子类类型向父类类型向上转换的过程，这个过程是默认的。</p><p>使用格式：</p><pre class="line-numbers language-java"><code class="language-java">父类类型<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>变量名<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>子类类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如：Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>向上转型一定是安全的，没有问题的，但是也有一个弊端：<strong>对象一旦向上转型为父类，那么就无法调用子类原本特有的内容</strong>。当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，不能调用子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子 类特有的方法，必须做向下转型</p><p>解决方法：用对象的向下转型【还原】</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><ul><li><p><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。</p><p>一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</p><p>使用格式：</p><pre class="line-numbers language-java"><code class="language-java">子类类型<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>变量名<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>子类类型<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>父类变量名<span class="token punctuation">;</span>如<span class="token operator">:</span>Cat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>c<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>代码演示：</p><p>定义类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Cat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Dog<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">extends</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">watchHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Test<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;向上转型</span>        Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;nbsp;调用的是&amp;nbsp;Cat&amp;nbsp;的&amp;nbsp;eat</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;向下转型</span>        Cat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>c<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用的是&amp;nbsp;Cat&amp;nbsp;的&amp;nbsp;catchMouse</span>    <span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转型的异常"><a href="#转型的异常" class="headerlink" title="转型的异常"></a>转型的异常</h3><p>转型的过程中，一不小心就会遇到这样的问题，请看如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Test<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;向上转型</span>        Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用的是&amp;nbsp;Cat&amp;nbsp;的&amp;nbsp;eat</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;向下转型</span>        Dog<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>d<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>a<span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">watchHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;调用的是&amp;nbsp;Dog&amp;nbsp;的&amp;nbsp;watchHouse&amp;nbsp;【运行报错】</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码可以通过编译，但是运行时，却报出了 <code>ClassCastException</code> ，类型转换异常！这是因为，明明创建了 Cat 类型对象，运行时，当然不能转换成 Dog 对象的。这两个类型并没有任何继承关系，不符合类型转换的定义。 </p><p><img src="https://i.loli.net/2021/05/19/bEfkhQo9Wzi6xRg.png" alt="向上向下类型转换"></p><p>为了避免 <code>ClassCastException</code> 的发生，Java 提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验，格式如下：</p><pre class="line-numbers language-java"><code class="language-java">变量名<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">instanceof</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>数据类型如果变量属于该数据类型，返回<span class="token boolean">true</span>。如果变量不属于该数据类型，返回<span class="token boolean">false</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以，转换前，我们最好先做一个判断，代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Test<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;向上转型</span>        Animal<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//&amp;nbsp;调用的是&amp;nbsp;Cat&amp;nbsp;的&amp;nbsp;eat</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;向下转型</span>        <span class="token keyword">if</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">instanceof</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Cat<span class="token punctuation">)</span><span class="token punctuation">{</span>            Cat<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>c<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>a<span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;调用的是&amp;nbsp;Cat&amp;nbsp;的&amp;nbsp;catchMouse</span>        <span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">instanceof</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Dog<span class="token punctuation">)</span><span class="token punctuation">{</span>            Dog<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>d<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>a<span class="token punctuation">;</span>            d<span class="token punctuation">.</span><span class="token function">watchHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;调用的是&amp;nbsp;Dog&amp;nbsp;的&amp;nbsp;watchHouse</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="接口多态的综合案例"><a href="#接口多态的综合案例" class="headerlink" title="接口多态的综合案例"></a>接口多态的综合案例</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>笔记本电脑（laptop）通常具备使用 USB 设备的功能。在生产时，笔记本都预留了可以插入 USB 设备的 USB 接口， 但具体是什么 USB 设备，笔记本厂商并不关心，只要符合 USB 规格的设备都可以。 </p><p>定义 USB 接口，具备基本的开启功能和关闭功能。鼠标和键盘要想能在电脑上使用，那么鼠标和键盘也必须遵守 USB 规范，实现 USB 接口，否则鼠标和键盘的生产出来也无法使用。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>进行描述笔记本类，实现笔记本使用USB鼠标、USB键盘</p><ul><li>USB接口，包含开启功能、关闭功能</li><li> 笔记本类，包含运行功能、关机功能、使用USB设备功能 </li><li>鼠标类，要实现USB接口，并具备点击的方法 </li><li>键盘类，要实现USB接口，具备敲击的方法</li></ul><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>定义接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">USB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开设备</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 关闭设备</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义鼠标类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 鼠标就是一个 USB 设备</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标打开！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标关闭！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鼠标点击。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义键盘类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 键盘就是一个 USB 设备</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Keyboard</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键盘打开！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键盘关闭！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键盘输入。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义电脑类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电脑开机！欢迎使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电脑关机！再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用 USB 设备的方法, 使用接口作为方法的参数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useDevice</span><span class="token punctuation">(</span>USB usb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        usb<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 打开设备</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>usb <span class="token keyword">instanceof</span> <span class="token class-name">Mouse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Mouse usbMouse <span class="token operator">=</span> <span class="token punctuation">(</span>Mouse<span class="token punctuation">)</span> usb<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 向下转型</span>            usbMouse<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>usb <span class="token keyword">instanceof</span> <span class="token class-name">Keyboard</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Keyboard usbKeyboard <span class="token operator">=</span> <span class="token punctuation">(</span>Keyboard<span class="token punctuation">)</span> usb<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 向下转型</span>            usbKeyboard<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        usb<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭设备</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首先创建一个笔记本电脑</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computer<span class="token punctuation">.</span><span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 准备一个鼠标，供电脑使用</span>        Mouse mouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 首先进行向上转型</span>        USB usbMouse <span class="token operator">=</span> mouse<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 多态写法</span>        <span class="token comment" spellcheck="true">// 参数是 USB 类型，正好传递进去的就是 USB 鼠标</span>        computer<span class="token punctuation">.</span><span class="token function">useDevice</span><span class="token punctuation">(</span>usbMouse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个 USB 键盘</span>        Keyboard USBKeyboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有使用多态写法</span>        <span class="token comment" spellcheck="true">// 方法参数是 USB 类型，传递进去的是实现类对象</span>        computer<span class="token punctuation">.</span><span class="token function">useDevice</span><span class="token punctuation">(</span>USBKeyboard<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 也是正确写法！自动发生了向上转型。</span>        computer<span class="token punctuation">.</span><span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 正确写法：double --> double</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确写法：int --> double</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 正确写法：int --> double</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">double</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h1><h2 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h2><p>学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。那么我们能不能随意的继承 API 中提供的类，改写其内容呢？显然这是不合适的。为了避免这种随意改写的情况，Java 提供了 <code>final</code> 关键字， 用于修饰不可改变内容。</p><ul><li><strong>final</strong>：不可改变，可以用于修饰类、方法和变量<ul><li>类：被修饰的类，不能被继承</li><li>方法：被修饰的方法，不能被重写</li><li>变量：被修饰的变量，不能被重新赋值</li></ul></li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="修饰类："><a href="#修饰类：" class="headerlink" title="修饰类："></a>修饰类：</h3><p>格式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>当 <code>final</code> 关键字修饰一个类的时候，表示这个类【不能有任何的子类】</li><li>一个类如果是 <code>final</code> 的，那么其中所有的成员方法都无法进行覆盖重写</li></ul><h3 id="修饰方法："><a href="#修饰方法：" class="headerlink" title="修饰方法："></a>修饰方法：</h3><p>格式：</p><pre class="line-numbers language-java"><code class="language-java">修饰符 <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>当 <code>final</code> 关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写</li><li>正因为方法不能被重写，所以对于类、方法来说，<code>abstract</code> 和 <code>final</code> 不能连用</li></ul><h3 id="修饰局部变量"><a href="#修饰局部变量" class="headerlink" title="修饰局部变量"></a>修饰局部变量</h3><p>基本类型的局部变量，被ﬁnal修饰后，只能赋值一次，不能再更改</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>FinalDemo1<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;声明变量，使用final修饰</span>        <span class="token keyword">final</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;第一次赋值</span>        a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;第二次赋值</span>        a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;报错,不可重新赋值</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;声明变量，直接赋值，使用final修饰</span>        <span class="token keyword">final</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>b<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;第二次赋值</span>        b<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;报错,不可重新赋值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用类型的局部变量，被 <code>ﬁnal</code> 修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的 修改，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>FinalDemo2<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;创建&amp;nbsp;User&amp;nbsp;对象</span>        <span class="token keyword">final</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>User<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>u<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;创建&amp;nbsp;另一个&amp;nbsp;User对象</span>        u<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;报错，指向了新的对象，地址值改变。</span>        <span class="token comment" spellcheck="true">//&amp;nbsp;调用setName方法</span>        u<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;可以修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修饰成员变量"><a href="#修饰成员变量" class="headerlink" title="修饰成员变量"></a>修饰成员变量</h3><p>成员变量涉及到初始化的问题，初始化方式有两种，只能二选一：</p><ul><li><p>显示初始化：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>User<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">final</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>USERNAME<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造方法初始化：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">class</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>User<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">final</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>USERNAME<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">User</span><span class="token punctuation">(</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>username<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>USERNAME<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>被ﬁnal修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p></blockquote></li></ul><h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><h2 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h2><p>在 Java 中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限</p><ul><li>public：公共的。</li><li> protected：受保护的</li><li> default：默认的</li><li> private：私有的</li></ul><h2 id="不同权限的访问能力"><a href="#不同权限的访问能力" class="headerlink" title="不同权限的访问能力"></a>不同权限的访问能力</h2><table><thead><tr><th align="center">情形</th><th align="center">public</th><th align="center">protected</th><th align="center">default</th><th align="center">private</th></tr></thead><tbody><tr><td align="center">同一类中</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">同一包中(子类与无关类)</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">不同包的子类</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">不同包中的无关类</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>可见，<code>public</code> 具有最大权限。<code>private</code> 则是最小权限。<br>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li><p>成员变量使用 <code>private</code> ，隐藏细节。</p></li><li><p> 构造方法使用 <code>public</code> ，方便创建对象。</p></li><li><p>成员方法使用 <code>public</code> ，方便调用方法。</p><blockquote><p> 不加权限修饰符，其访问能力与default修饰符相同 </p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程(一):Linux基础知识补充</title>
      <link href="2021/05/09/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-%E4%B8%80-Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
      <url>2021/05/09/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-%E4%B8%80-Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1章：Linux操作系统编程基础知识补充"><a href="#第-1章：Linux操作系统编程基础知识补充" class="headerlink" title="第 1章：Linux操作系统编程基础知识补充"></a>第 1章：Linux操作系统编程基础知识补充</h1><blockquote><p>课程视频：<a href="https://www.bilibili.com/video/BV1KE411q7ee?p=35">黑马程序员 - Linux系统编程</a></p></blockquote><h2 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h2><ul><li><p><code>cd</code> 命令</p><p><code>cd -</code> 在当前目录和上一个目录之间切换</p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">cd</span> /etc/nginx❯ <span class="token function">cd</span> ~/my_code❯ <span class="token function">cd</span> -/etc/nginx❯ <span class="token function">pwd</span>/etc/nginx❯ <span class="token function">cd</span> -~/my_code❯ <span class="token function">pwd</span>/home/black/my_code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>ls</code>命令</p><p><code>ls -R</code> 递归显示当前目录下文件和文件夹</p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">cd</span> Downloads❯ <span class="token function">ls</span> -R.:Compressed  Documents  Music  Programs  Video./Compressed:Hack.zip./Documents:cryptous.pdf  PDF_611399243.html./Music:./Programs:code-server_3.8.0_amd64.deb./Video:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-2-文件和用户"><a href="#1-2-文件和用户" class="headerlink" title="1.2 文件和用户"></a>1.2 文件和用户</h2><table><thead><tr><th align="center">名称</th><th align="center">ls -l 中的表示</th></tr></thead><tbody><tr><td align="center">普通文件</td><td align="center">-</td></tr><tr><td align="center">目录文件</td><td align="center">d</td></tr><tr><td align="center">字符设备文件</td><td align="center">c</td></tr><tr><td align="center">块设备文件</td><td align="center">b</td></tr><tr><td align="center">软链接</td><td align="center">l</td></tr><tr><td align="center">管道文件</td><td align="center">p</td></tr><tr><td align="center">套接字</td><td align="center">s</td></tr></tbody></table><ul><li><p><code>chmod</code>命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token punctuation">[</span>who<span class="token punctuation">]</span> <span class="token punctuation">[</span>+<span class="token operator">|</span>-<span class="token operator">|</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>mode<span class="token punctuation">]</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>who</code>可以是下面字母中的任意一个或者他们的组合：</p><ul><li>u : 表示用户，即文件或目录的所有者</li><li>g : 表示同组用户，即与文件属主有相同ID的所有用户</li><li>o : 表示其他用户</li><li>a : 表示所有用户，是系统默认值</li></ul><p>操作符号可以是：</p><ul><li>+: 添加某个权限</li><li>-: 取消某个权限</li><li>=: 赋予给定权限并取消其他所有权限</li></ul><p><code>mod</code> 即可读可写可执行的任意组合</p></li><li><p><code>tar</code>命令</p><ul><li><code>-c</code>：创建新的档案文件</li><li><code>-r</code>：把要存档的文件追加到档案文件的末尾</li><li><code>-t</code>：列出档案文件内容，查看档案包中的文件</li><li><code>-u</code>：更新文件。用新增的文件取代原档案文件，如果在档案文件中找不到要更新的文件，则把他追加到档案文件的最后</li><li><code>-x</code>：从档案文件中释放文件</li><li><code>-z</code>：使用<code>gzip</code>进行压缩</li><li><code>-j</code>：使用<code>bzip2</code>方式压缩</li></ul><p>常用创建压缩文件的命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zcvf compress.tar.gz file1 file2 dir1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用解压缩文件命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -jcvf compress.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>rar</code>和<code>unrar</code></p><p>压缩文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rar</span> a -r compress.rar file1 dir2 file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">unrar</span> x compress.rar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>zip</code>和<code>unzip</code></p><p>压缩文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">zip</span> -r compress.zip file1 dir1 file3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压缩文件</p><pre class="line-numbers language-bash"><code class="language-bash">unzip compress.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="1-3-搜索"><a href="#1-3-搜索" class="headerlink" title="1.3 搜索"></a>1.3 搜索</h2><ul><li><p><code>chown</code>命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token punctuation">[</span>OWNER:GROUP<span class="token punctuation">]</span> FILE <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>OPTION</code> 的主要参数：</p><ul><li>-R：递归地改变指定目录及其下的所有子目录和文件的拥有者。</li><li>-v：显示<code>chown</code>命令所做的工作。</li></ul></li><li><p><code>find</code>命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token punctuation">[</span>PATHNAME<span class="token punctuation">]</span> <span class="token punctuation">[</span>-OPTIONS: -print -exec -ok -name -type <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-name</code> ：按文件名搜索</li><li><code>-maxdepth</code>：指定搜索深度</li><li><code>-size</code>：按文件大小搜索：k、M、G</li><li><code>-atime、-mtime、-ctime</code>：accsess time访问时间、mod change属性更改时间、change time文件内容更改时间</li><li><code>-type</code>：按文件类型搜索。d/p/s/c/b/l/f(文件)</li></ul><p>扩展</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> /usr/ -name <span class="token string">'*tmp*'</span> -exec <span class="token function">rm</span> -r <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span class="token function">find</span> /usr/ -name <span class="token string">'*tmp*'</span> -ok <span class="token function">rm</span> -r <span class="token punctuation">[</span><span class="token punctuation">]</span> \<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果查找的文件名中有空格，同时又想利用<code>xargs</code>管道的话：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> ./ <span class="token function">type</span> f print0 <span class="token operator">|</span> <span class="token function">xargs</span> -0 <span class="token function">ls</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>grep</code> 命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> PATTERN <span class="token punctuation">[</span>FILE<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-r</code>：递归搜索</p><p><code>-n</code>：显示行号</p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">cat</span> abckkfdasjfklasfjhello<span class="token operator">!</span> worlddfasjfklasnflk2131312❯ <span class="token function">grep</span> <span class="token string">"hello\!"</span> ./ -rn./abc:2:hello<span class="token operator">!</span> world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>xargs</code></p><p>有时后面的命令不接受管道，此时可以添加<code>xargs</code>实现。</p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">ls</span> -l总用量 108-rw-r--r-- 1 black black    51  1月 20 15:58 abc-rw-r--r-- 1 black black 98571  1月 14 12:05 blog.WordPress.2021-01-14.xmldrwxr-xr-x 2 black black  4096  1月 20 16:01 temp❯ <span class="token function">find</span> ./ -type f <span class="token operator">|</span> <span class="token function">ls</span> -l总用量 108-rw-r--r-- 1 black black    51  1月 20 15:58 abc-rw-r--r-- 1 black black 98571  1月 14 12:05 blog.WordPress.2021-01-14.xmldrwxr-xr-x 2 black black  4096  1月 20 16:01 temp❯ <span class="token function">find</span> ./ -type f <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ls</span> -l-rw-r--r-- 1 black black    51  1月 20 15:58 ./abc-rw-r--r-- 1 black black 98571  1月 14 12:05 ./blog.WordPress.2021-01-14.xml❯ <span class="token function">find</span> ./ -type f <span class="token operator">|</span> <span class="token function">grep</span> ab./abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-4-GCC补充知识"><a href="#1-4-GCC补充知识" class="headerlink" title="1.4 GCC补充知识"></a>1.4 <code>GCC</code>补充知识</h2><ul><li><p><code>gcc</code>编译可执行程序的步骤：</p><p><img src="https://i.loli.net/2021/05/09/bhCnOsjJ7qdGy5V.png" alt="1.4_1"></p></li><li><p><code>gcc</code>常用参数：</p><ul><li><p><code>-I [directory]</code>：指定头文件目录。</p><pre class="line-numbers language-bash"><code class="language-bash">❯ <span class="token function">cat</span> hello.c<span class="token comment" spellcheck="true">#include&lt;hello.h></span>int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                printf<span class="token punctuation">(</span><span class="token string">"nihao\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span>❯ <span class="token function">cat</span> inc/hello.h<span class="token comment" spellcheck="true">#include&lt;stdio.h></span>❯ gcc hello.c -o hellohello.c:1:9: 致命错误：hello.h：没有那个文件或目录    1 <span class="token operator">|</span> <span class="token comment" spellcheck="true">#include&lt;hello.h></span>      <span class="token operator">|</span>         ^~~~~~~~~编译中断。❯ gcc hello.c -o hello -I ./inc/❯ ./hellonihao❯<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>-c</code>：只做预处理、编译、汇编操作，生成<code>.o</code>二进制文件，不进行链接</p></li><li><p><code>-g</code>：包含调试信息</p></li><li><p><code>-O[n]</code>：<code>n</code>可取0～3，<code>n</code>越大，优化越多</p></li><li><p><code>-Wall</code>：提示更多警告信息</p></li><li><p><code>-E</code>：生成预处理文件</p></li><li><p><code>-D[DEF]</code>：编译时定义宏</p></li><li><p><code>-l</code>：指定动态库名</p></li><li><p><code>-L</code>：指定动态库路径</p></li></ul></li></ul><h2 id="1-5-其他命令"><a href="#1-5-其他命令" class="headerlink" title="1.5 其他命令"></a>1.5 其他命令</h2><ul><li><p><code>jobs</code>、<code>fg</code>、<code>bg</code></p><ul><li><code>jobs</code>用来显示当前shell下正在运行那些作业。</li><li><code>fg</code>切换到前台</li></ul><p>示例如下：</p><pre class="line-numbers language-bash"><code class="language-bash">❯ kolourpaint <span class="token operator">&amp;</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> 481488❯ <span class="token function">jobs</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>  + running    kolourpaint❯ <span class="token function">fg</span> kolourpaint<span class="token punctuation">[</span>1<span class="token punctuation">]</span>  + 483544 running    kolourpaint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>man</code></p><p>使用中需要注意的一点是，有很多重名的函数，比如<code>shell</code>编程中和<code>c</code>语言中都有<code>prinrf</code>这个函数，直接使用<code>man printf</code>可能不是我们想要的信息，因此需要注意章节信息。</p><ul><li><p><code>man man</code> ：查看章节以及帮助信息</p></li><li><p><code>man read</code>：查看<code>read</code>命令的 man page</p></li><li><p><code>man 3 printf</code>：查看程序库函数函数中<code>printf</code>的信息。（即在第三个 section 中，表示为 <code>printf(3)</code>）。</p></li><li><p><code>man -k printf</code>：以<code>printf</code>为关键字查找相关的 man page.</p></li></ul><p>附章节信息如下（可通过<code>man man</code>查看）：</p><pre class="line-numbers language-tex"><code class="language-tex">1  可执行程序或 shell 命令 2  系统调用(内核提供的函数) 3  库调用(程序库中的函数) 4  特殊文件(通常位于 /dev) 5  文件格式和规范，如  /etc/passwd 6  游戏 7  杂项(包括宏包和规范，如 **man**(7)，**groff**(7)) 8  系统管理命令(通常只针对 root 用户) 9  内核例程 [非标准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-6-vim的实用补充："><a href="#1-6-vim的实用补充：" class="headerlink" title="1.6 vim的实用补充："></a>1.6 <code>vim</code>的实用补充：</h2><ul><li><p>命令模式：</p><ul><li><code>I</code>：光标跳转到行首并跳转到编辑插入模式。</li><li><code>A</code>：光标跳转到行尾并跳转到编辑插入模式。</li><li><code>ci"</code>：删除双引号中间的所有内容并进入编辑模式，i有<code>in</code>的意思，可以配合其他使用。</li><li><code>fw</code>：光标跳转到w。</li><li><code>s</code>：删除光标所在字符并跳转到编辑插入模式。</li><li><code>S</code>：删除光标所在行并跳转到编辑插入模式。</li><li><code>gg=G</code>：格式化代码。</li><li><code>%</code>：光标如果在成对的符号上（如大括号、小括号、注释的斜线）则会跳转到下一个与其对应的下一个符号上，如果光标字在函数名上，则会跳转到括号上。</li><li><code>dw</code>：删除光标所在的单词</li><li><code>D</code>：从光标处删除至行尾</li><li><code>0</code>：光标跳转到行首</li><li><code>d0</code>：从光标删除至行首</li><li><code>$</code>：光标跳转到行尾</li><li><code>3dd</code>：从光标处行开始往下删除3行</li><li><code>3yy</code>：从光标行开始向下复制3行</li><li><code>*</code>：光标至于字符（单词）上，查找下一个与此匹配的字符（单词）。</li><li><code>#</code>：与<code>*</code>作用相同，但是是向前搜索。</li><li><code>&gt;&gt;</code>和<code>&lt;&lt;</code>：光标所在行向右或者向左缩进一次</li><li><code>[Ctrl+]ww</code>：在不同分屏窗口之间切换</li><li><code>3K</code>：跳转到光标所在单词的<code>man page</code>，其中3表示字在<code>man page</code>的第三章查找</li><li><code>[d</code>：查看光标所在单词的宏定义</li></ul></li><li><p>末行模式：</p><ul><li><code>s /name1/name2/g</code>：将光标所在行的所有<code>name1</code>替换成<code>name2</code>。</li><li><code>s /name1/name2</code>：将光标所在行的出现的第一个<code>name1</code>替换成<code>name2</code>。</li><li><code>%s /name1/name2/g</code>：将文件中所有出现的<code>name1</code>替换成<code>name2</code>。</li><li><code>%s /name1/name2</code>：将文件中每一行第一个出现的<code>name1</code>替换成<code>name2</code>。</li><li><code>5, 9s /name1/name2/g</code>：自第5行起至第9行所有出现的<code>name1</code>替换成<code>name2</code></li><li><code>sp</code>和<code>vsp</code>：上下分屏和左右分屏</li><li><code>qall</code>：退出所有分屏</li></ul></li><li><p>可视模式</p><ul><li><code>[shift]+v</code>：进入行可视模式，一次选中一行。</li><li><code>ctrl+v</code>：可视块模式。</li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu部署lamp环境</title>
      <link href="2021/05/08/Ubuntu%E9%83%A8%E7%BD%B2lamp%E7%8E%AF%E5%A2%83/"/>
      <url>2021/05/08/Ubuntu%E9%83%A8%E7%BD%B2lamp%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu20-04安装lamp基础环境"><a href="#Ubuntu20-04安装lamp基础环境" class="headerlink" title="Ubuntu20.04安装lamp基础环境"></a>Ubuntu20.04安装lamp基础环境</h1><h2 id="我的设备："><a href="#我的设备：" class="headerlink" title="我的设备："></a>我的设备：</h2><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ neofetch            .-/+oossssoo+/-.               black@black-OMEN         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           ----------------       -+ssssssssssssssssssyyssss+-         OS: Ubuntu 20.04 LTS x86_64     .ossssssssssssssssssdMMMNysssso.       Host: OMEN by HP Laptop    /ssssssssssshdmmNNmmyNMMMMhssssss/      Kernel: 5.4.0-40-generic   +ssssssssshmydMMMMMMMNddddyssssssss+     Uptime: 1 hour, 58 mins  /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Packages: 1637 <span class="token punctuation">(</span>dpkg<span class="token punctuation">)</span>, 11 <span class="token punctuation">(</span>snap<span class="token punctuation">)</span> .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Shell: <span class="token function">bash</span> 5.0.16 +sssshhhyNMMNyssssssssssssyNMMMysssssss+   Resolution: 1920x1080 ossyNMMMNyMMhsssssssssssssshmmmhssssssso   DE: GNOME ossyNMMMNyMMhsssssssssssssshmmmhssssssso   WM: Mutter +sssshhhyNMMNyssssssssssssyNMMMysssssss+   WM Theme: Adwaita .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Theme: Yaru-dark <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>  /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/    Icons: Yaru <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>   +sssssssssdmydMMMMMMMMddddyssssssss+     Terminal: gnome-terminal    /ssssssssssshdmNNNNmyNMMMMhssssss/      CPU: Intel i5-7300HQ <span class="token punctuation">(</span>4<span class="token punctuation">)</span> @ 3.500GHz     .ossssssssssssssssssdMMMNysssso.       GPU: Intel HD Graphics 630       -+sssssssssssssssssyyyssss+-         GPU: NVIDIA GeForce GTX 1050 Mobile         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           Memory: 2511MiB / 11867MiB             .-/+oossssoo+/-.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装php-php-fpm-apache2-Nginx-mariadb-server"><a href="#安装php-php-fpm-apache2-Nginx-mariadb-server" class="headerlink" title="安装php, php-fpm, apache2(Nginx), mariadb-server"></a>安装php, php-fpm, apache2(Nginx), mariadb-server</h2><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> apt <span class="token function">install</span> php php-fpm apache2 mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置mariadb-server"><a href="#配置mariadb-server" class="headerlink" title="配置mariadb-server"></a>配置mariadb-server</h3><ul><li><p>注意 <strong>root</strong> 运行</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> mysql_secure_installation<span class="token comment" spellcheck="true"># 首先会让你输入密码，因为是初次安装，所以直接回车即可</span><span class="token comment" spellcheck="true"># 然后会让你设置root密码，并确认</span><span class="token comment" spellcheck="true"># 之后的，一路回车即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此处不 <strong>root</strong> 运行<code>mysql_secure_installation</code>是会说你密码错误的。</p></li><li><p>运行服务</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> <span class="token function">service</span> mariadb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入试试：</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> mysql -u root -pEnter password: Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MariaDB connection <span class="token function">id</span> is 60Server version: 10.3.22-MariaDB-1ubuntu1 Ubuntu 20.04Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span>+--------------------+3 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.001 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此成功。</p></li></ul><h3 id="配置apache2和php-fpm"><a href="#配置apache2和php-fpm" class="headerlink" title="配置apache2和php-fpm"></a>配置apache2和php-fpm</h3><ul><li><p>首先停止这两个的服务</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> <span class="token function">service</span> apache2 stopblack@black-OMEN:~$ <span class="token function">sudo</span> <span class="token function">service</span> php7.4-fpm stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编辑apache2配置文件</p><p>首先看下目录结构：</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">cd</span> /etc/apache2/black@black-OMEN:/etc/apache2$ <span class="token function">ls</span>apache2.conf  conf-available  conf-enabled  envvars  magic  mods-available  mods-enabled  ports.conf  sites-available  sites-enabledblack@black-OMEN:/etc/apache2$ tree conf-available/conf-available/├── charset.conf├── localized-error-pages.conf├── other-vhosts-access-log.conf├── php7.4-fpm.conf├── security.conf└── serve-cgi-bin.conf0 directories, 6 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面可以看到，在<code>conf-available</code>中已经有配置好的文件。那怎么让它生效呢？看下<code>conf-enabled</code>目录结构：</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:/etc/apache2$ tree conf-enabled/conf-enabled/├── charset.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/charset.conf├── localized-error-pages.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/localized-error-pages.conf├── other-vhosts-access-log.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/other-vhosts-access-log.conf├── security.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/security.conf└── serve-cgi-bin.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/serve-cgi-bin.conf0 directories, 5 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可发现，实际上<code>conf-enabled</code>就是<code>conf-available</code>里的软连接，因此，<strong>我们只需要在<code>conf-enabled</code>里创建<code>conf-available/php7.4-fpm.conf</code>的软链接即可</strong>。</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:/etc/apache2$ <span class="token function">cd</span> conf-enabled/black@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> <span class="token function">ln</span> -s <span class="token punctuation">..</span>/conf-available/php7.4-fpm.conf <span class="token comment" spellcheck="true"># 此时查看enabled情况，发现已经被添加到了。</span>black@black-OMEN:/etc/apache2/conf-enabled$ tree <span class="token keyword">.</span><span class="token keyword">.</span>├── charset.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/charset.conf├── localized-error-pages.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/localized-error-pages.conf├── other-vhosts-access-log.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/other-vhosts-access-log.conf├── php7.4-fpm.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/php7.4-fpm.conf├── security.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/security.conf└── serve-cgi-bin.conf -<span class="token operator">></span> <span class="token punctuation">..</span>/conf-available/serve-cgi-bin.conf0 directories, 6 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>因为我这里装的正好就是<code>php7.4-fpm</code>，而且是通过<code>apt</code>装的，所以使用默认即可，如果你不是用的默认的，则还需要修改下<code>php7.4-fpm.conf</code>中的参数。</p></li><li><p>重启服务，测试</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动服务</span>black@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> <span class="token function">service</span> apache2 restartblack@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> <span class="token function">service</span> php7.4-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试<code>html</code></p><pre><code>black@black-OMEN:/etc/apache2/conf-enabled$ sudo vim /var/www/html/test.html</code></pre><p>此时若访问<a href="localhost/test.html">localhost/test.html</a>配置即完成。</p><p>测试<code>.php</code></p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> vim /var/www/html/test.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时若访问<a href="localhost/test.php">localhost/test.php</a>配置即完成。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用案例</title>
      <link href="2021/05/08/Docker%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
      <url>2021/05/08/Docker%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker使用案例"><a href="#Docker使用案例" class="headerlink" title="Docker使用案例"></a>Docker使用案例</h1><blockquote><p>来自: 布菜克先生</p></blockquote><h2 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h2><p><a href="https://docs.docker.com/v17.09/engine/installation/linux/docker-ce/ubuntu/">官方文档</a></p><h2 id="使用Docker来安装OwnCloud"><a href="#使用Docker来安装OwnCloud" class="headerlink" title="使用Docker来安装OwnCloud"></a>使用Docker来安装OwnCloud</h2><p>参见：<a href="https://www.jianshu.com/p/f09194ff94d5">简书</a></p><h4 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h4><ol><li><p>拉取OwnCloud的官方docker镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull owncloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 需要用root用户拉取，否则会有警告：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Warning<span class="token punctuation">:</span> failed to <span class="token keyword">get</span> <span class="token keyword">default</span> registry endpoint <span class="token keyword">from</span> <span class="token function">daemon</span> <span class="token punctuation">(</span>Cannot connect to the Docker daemon<span class="token punctuation">.</span> Is the docker daemon running on <span class="token keyword">this</span> host<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Using system <span class="token keyword">default</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>index<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>io<span class="token operator">/</span>v1<span class="token operator">/</span>Cannot connect to the Docker daemon<span class="token punctuation">.</span> Is the docker daemon running on <span class="token keyword">this</span> host<span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>改用MySQL数据库</p><p> <code>owncloud</code> 默认使用 <code>SQLite</code> 数据库，官方建议选择另外一个不同的数据库，特别当使用桌面客户端同步文件时，不鼓励使用 <code>SQLite</code>。</p><p> 拉取 <code>mysql</code> 官方docker镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 启动 MySQL 容器，用作 owncloud 容器的数据库。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --name my-mysql -p 3306:3306 -v /var/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token string">"123456"</span> -d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这里的密码为123456，端口是默认的<code>3306</code>，也可以用 <code>-p 宿主机映射端口:容器运行端口</code>来指定</p></li><li><p>启动 owncloud 容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker run --name owncloud -p 5679:80   -v /data/db/owncloud:/var/www/html/data --link my-mysql:mysql -d owncloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <code>-p 5679:80</code> 将容器的80端口映射到宿主局的5679端口。</p><p> <code>--link my-mysql:mysql</code> ：将 <code>owncloud容器(客户)</code> 链接到 <code>my-mysql容器(服务)</code>，链接别名：<code>mysql</code>。</p></li><li><p>配置 nginx 反向代理</p><p> 在 <code>etc/nginx/nginx.conf</code> 的 <code>http{}</code> 段写入:</p><pre class="line-numbers language-php"><code class="language-php">upstream pan_server<span class="token punctuation">{</span>    server  <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">5679</span><span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen   <span class="token number">80</span><span class="token punctuation">;</span>    server_name pan<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    access_log <span class="token operator">/</span>data<span class="token operator">/</span>logs<span class="token operator">/</span>nginx<span class="token operator">/</span>pan<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    error_log <span class="token operator">/</span>data<span class="token operator">/</span>logs<span class="token operator">/</span>nginx<span class="token operator">/</span>pan<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span class="token punctuation">.</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span> <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_set_header X<span class="token operator">-</span>Real<span class="token operator">-</span><span class="token constant">IP</span> <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span> <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        add_header Cache<span class="token operator">-</span>Control  <span class="token string">"no-cache"</span><span class="token punctuation">;</span>        proxy_pass http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//pan_server;</span>        limit_rate 256m<span class="token punctuation">;</span>        client_max_body_size <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装 <code>owncloud</code></p><p>在浏览器上访问 <code>pan.xxx.com</code>，进入 owncloud 安装步骤：</p><img src="https://i.loli.net/2021/05/08/F2KdDVZO3H9cY5n.png" alt="安装步骤" style="zoom: 50%;"><p>这里可能会报错误：</p><pre class="line-numbers language-c"><code class="language-c">SQLSTATE<span class="token punctuation">[</span>HY000<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2054</span><span class="token punctuation">]</span> The server requested authentication method unknown to the client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是：</p><p>MySQL 8默认使用了新的密码验证插件：<code>caching_sha2_password</code>，而之前的PHP版本中所带的mysqlnd无法支持这种验证</p><p>解决方法两种，一种是升级PHP支持mysql8的新验证插件，另一种mysql验证方式降级。</p><ul><li><p>方法一</p><p>先进入容器终端</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认是没有 vi的，先装它：</p><pre class="line-numbers language-bash"><code class="language-bash">apt update <span class="token operator">&amp;&amp;</span> apt <span class="token function">install</span> vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，mysql 配置文件 my.cnf添加配置：</p><pre class="line-numbers language-bash"><code class="language-bash">default_authentication_plugin<span class="token operator">=</span>mysql_native_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方法二</p><p>进入容器终端</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在mysql下运行命令</p><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER USER 'YOURUSERNAME'@'%' IDENTIFIED WITH mysql_native_password BY 'YOURPASSWORD';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>MySQL数据库配置：</p><blockquote><p>  数据库用户：root<br>  数据库密码：123456<br>  数据库名：owncloud<br>  数据库主机：mysql 或 my-mysql</p></blockquote></li></ol><h4 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h4><p>以将上面启动 owncloud 和 mysql 容器的两个步骤合成一步完成，这里介绍 <code>docker-compose</code> 的使用。</p><ol><li><p>安装</p><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> -U docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>docker-compose.yml 文件编写</p><pre class="line-numbers language-yml"><code class="language-yml">version: '2'services:  owncloud:    image: owncloud    links:       - mysql:mysql    volumes:      - "/data/db/owncloud:/var/www/html/data"    ports:      - 5679:80  mysql:    image: mysql    volumes:      - "/data/db/mysql:/var/lib/mysql"    ports:      - 3306:3306    environment:      MYSQL_ROOT_PASSWORD: "123456"      MYSQL_DATABASE: ownCloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>docker-compose 运行和停止</p><p> 注意：<code>docker-compose</code> 必须在 <code>docker-compose.yml</code> 文件所在目录中执行，否则会报错</p><p> docker-compose 后台启动</p><pre class="line-numbers language-bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> docker-compose 查看状态</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># docker-compose ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> docker-compose 停止和删除</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># docker-compose stop</span><span class="token comment" spellcheck="true"># dcoker-compose rm</span>相当上面两条命令<span class="token comment" spellcheck="true"># dcoker-compose down</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="使用Dockera安装WordPress"><a href="#使用Dockera安装WordPress" class="headerlink" title="使用Dockera安装WordPress"></a>使用Dockera安装WordPress</h2><ol><li><p>pull WordPress镜像</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker pull wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行MySQL</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建WordPress数据库</p><p> 进入容器终端</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 进入mysql</p><pre class="line-numbers language-bash"><code class="language-bash">mysql -u root -p 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 创建数据库</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行WordPress</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker run --name wordpress --link mysql:mysql -p 80:80 -d wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 其中别名，主机端口号根据情况自行配置</p></li><li><p> 浏览器访问即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Owncloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04初步配置教程</title>
      <link href="2021/05/08/Ubuntu20-04%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>2021/05/08/Ubuntu20-04%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍下<code>Ubuntu20.04</code>在我手上的日常使用，以及一些一本软件的安装，作为大家的参考。</p><p>我的环境：</p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ neofetch             .-/+oossssoo+/-.               black@black-OMEN         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           ----------------       -+ssssssssssssssssssyyssss+-         OS: Ubuntu 20.04 LTS x86_64     .ossssssssssssssssssdMMMNysssso.       Host: OMEN by HP Laptop    /ssssssssssshdmmNNmmyNMMMMhssssss/      Kernel: 5.4.0-40-generic   +ssssssssshmydMMMMMMMNddddyssssssss+     Uptime: 46 mins  /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Packages: 1922 <span class="token punctuation">(</span>dpkg<span class="token punctuation">)</span>, 11 <span class="token punctuation">(</span>s .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Shell: <span class="token function">bash</span> 5.0.16 +sssshhhyNMMNyssssssssssssyNMMMysssssss+   Resolution: 1920x1080 ossyNMMMNyMMhsssssssssssssshmmmhssssssso   DE: GNOME ossyNMMMNyMMhsssssssssssssshmmmhssssssso   WM: Mutter +sssshhhyNMMNyssssssssssssyNMMMysssssss+   WM Theme: Yaru-dark .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Theme: Yaru-dark <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>  /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/    Icons: Yaru <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>   +sssssssssdmydMMMMMMMMddddyssssssss+     Terminal: gnome-terminal    /ssssssssssshdmNNNNmyNMMMMhssssss/      CPU: Intel i5-7300HQ <span class="token punctuation">(</span>4<span class="token punctuation">)</span> @ 3     .ossssssssssssssssssdMMMNysssso.       GPU: Intel HD Graphics 630       -+sssssssssssssssssyyyssss+-         GPU: NVIDIA GeForce GTX 1050         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           Memory: 2699MiB / 11867MiB             .-/+oossssoo+/-.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><blockquote><p>参考：<a href="https://loige.co/random-emoji-in-your-prompt-how-and-why/">A random emoji in your terminal prompt. How and Why!</a></p><p>参考：<a href="https://www.cnblogs.com/himonkey/p/11853487.html#%E5%AE%89%E8%A3%85%E5%AD%97%E4%BD%93"></a><a href="https://www.cnblogs.com/himonkey/p/11853487.html">Mac 终端窗口配置</a></p></blockquote><p>​    展示下我的终端：</p><p><img src="https://i.loli.net/2021/05/08/sFyWmPgZ65T2Oic.png" alt="我的终端界面"></p><h4 id="展示命令成功与否"><a href="#展示命令成功与否" class="headerlink" title="展示命令成功与否"></a>展示命令成功与否</h4><p>命令执行得正确与否会有不同的表现。编辑代码<code>~/.bashrc</code>直接添加下面的代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">function</span> success_indicator<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"😎"</span>    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"💩"</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token function">export</span> PS1<span class="token operator">=</span><span class="token string">"\<span class="token variable"><span class="token variable">$(</span>success_indicator<span class="token variable">)</span></span>\[\e[32;40m\]\u\[\e[m\]\[\e[32m\]@\[\e[m\]\[\e[32m\]\h\[\e[m\]:\[\e[34m\]\W\[\e[m\]👉 "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这里还使用了两个工具：<a href="http://bashrcgenerator.com/">.bashrc PS1 generator by Julien Ricard</a> 和 <a href="http://ezprompt.net/">Easy Bash PS1 Generator by Josh Matthews</a></p><h4 id="展示文件夹和文件信息"><a href="#展示文件夹和文件信息" class="headerlink" title="展示文件夹和文件信息"></a>展示文件夹和文件信息</h4><ul><li><p>安装字体</p><p>原有的字体是不能显示这么多字符的。去<a href="https://www.nerdfonts.com/font-downloads">nerdfonts</a>下载，我下载的是<strong>Hack Nerd Font</strong>。安装就行，没必要全部安装。</p><p>终端里面设置字体。</p></li><li><p>安装<code>clolorls</code></p><p>首先需要安装<code>ruby</code>等。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> ruby ruby-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> colorls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置别名</p><p><code>vim ~/.bashrc</code>添加下面两行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">alias</span> ll<span class="token operator">=</span><span class="token string">'colorls -lA --sd --gs --group-directories-first'</span><span class="token function">alias</span> ls<span class="token operator">=</span><span class="token string">'colorls --group-directories-first'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="耳机杂音解决（Realtek-ALC295）"><a href="#耳机杂音解决（Realtek-ALC295）" class="headerlink" title="耳机杂音解决（Realtek ALC295）"></a>耳机杂音解决（Realtek ALC295）</h3><p>​    这个问题困扰了我好久了，之前装过<code>kali</code>，也出现了这样的情况，当时以为是通病，后来发现原来只有我有此问题。所以说，如果你的声音也出现了问题，可以搜索下自己的声卡型号。</p><p>​    终端输入：<code>sudo alsamixer</code>，回车，可以看到下面的信息：</p><p><img src="https://i.loli.net/2020/07/21/eyqwDLd5obJCrSf.png"></p><p>​    其中的<code>Chip</code>即是你的声卡型号。</p><p>​    我在<a href="https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/1648183">这个网站</a>找到了解决办法。首先安装<code>alsa-tools</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> alsa-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在<code>/usr/local/bin</code>下写个脚本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span>hda-verb /dev/snd/hwC0D0 0x20 SET_COEF_INDEX 0x67hda-verb /dev/snd/hwC0D0 0x20 SET_PROC_COEF 0x3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并加权。运行之后即时生效。</p><blockquote><p>**UPDATE: **此问题官方已修复。</p></blockquote><h3 id="设置文件夹为英文"><a href="#设置文件夹为英文" class="headerlink" title="设置文件夹为英文"></a>设置文件夹为英文</h3><p>​    刚装好的系统，如果你设置的语言是中文，那么其在家目录下面的文件夹名称全部都是中文，而我们经常要在终端里面进行切换文件夹等操作，有中文非常不方便，所以这一项是我必操作的步骤。</p><p>​    网上比较流行的一种方法是先将环境切换成英文，然后再切换成中文。特别麻烦，还要重启，也违背了<code>Linux</code>一切皆文件的思想，不知道这种方法怎么流行起来的。下面介绍我的方法</p><ul><li><p>编辑文件<code>user-dirs.dirs</code></p><pre class="line-numbers language-bash"><code class="language-bash">black@black-OMEN:~$ vim ~/.config/user-dirs.dirs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改为：</p><p><img src="https://i.loli.net/2020/07/21/UxTCVolPB6DbuA7.png"></p></li></ul><blockquote><p>vim的安装用法可参照我的另一篇文章：<a href="http://bucaike.top/2020/05/29/%e6%88%91%e6%89%93%e5%bc%80%e6%96%b0linux%e7%b3%bb%e7%bb%9f%e7%9a%84%e6%96%b9%e5%bc%8f/">我打开新Linux系统的方式</a></p><p>vim的配置文件<code>.vimrc</code>我推荐是自己备份一下，然后需要的时候直接拷贝过去就行。</p></blockquote><p>此时，此时再直接修改文件夹名称，可以看到文件夹有对应的图标了，这说明映射关系是正确的：</p><p><img src="https://i.loli.net/2020/07/21/ZXc2kwJRuvxY7iE.png"></p><h3 id="设置账号并同步日历等"><a href="#设置账号并同步日历等" class="headerlink" title="设置账号并同步日历等"></a>设置账号并同步日历等</h3><blockquote><p>这个我个人认为很重要，我的日历上面有我的各种日程，各种终端上面，只要登陆了我这个账号，那么日程消息就会同步过去，不会错过重要的日子和人。</p><p>我用的是微软的账户，其他终端如安卓，ios 上面都比较简单，但是<code>Linux</code>上面比较麻烦一点。</p></blockquote><ul><li><p>Microsoft 应用密码</p><p>这一步应该不是必须的，但是我建议你做一下。点击此<a href="https://account.live.com/proofs/AppPassword">链接</a>，得到应用密码。</p><p>如果你没有，那么可以从<a href="https://account.microsoft.com/">微软账户</a>转到“安全性”顶部菜单），更多安全性选项，“创建”新的应用程序密码（页面中间）。</p><p>如果你不能创建，那么是因为你没有设置“双重验证”，关于如何设置双重验证，微软已经给了文档，所以不再赘述。</p></li><li><p>Evolution&amp;Evolution-ews</p><blockquote><p>这里是比较关键的一步。对于Linux用户而言，将Outlook.com日历与Gnome Shell（Gnome 3）结合使用几乎是不可能的任务，这是由于用于与Microsoft通信的EAS（Exchange Active Sync）协议所致。</p><p>现在，使用EWS（Exchange Web服务），将Outlook.com日历（还包括邮件和联系人）集成到Gnome Shell中，很简单，只需一个扩展即可。</p></blockquote><p>我们需要安装Evolution（MS Outlook的Linux替代产品）和Evolution-ews扩展。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> Evolution Evolution-ews<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登陆账户</p><p>打开“设置” ，“在线账户”，添加账号，<strong>选Microsoft Exchange</strong>（而不是“微软”）。</p><p>在这里，电子邮箱输入你的的电子邮件地址，密码填刚才的 Microsoft 应用密码，展开“自定义”区域，再次输入您的电子邮件地址<strong>（与上面相同）作为用户名</strong>，重要的是输入Outlook.office365.com 作为服务器。然后点击“连接”。</p><p><img src="https://i.loli.net/2020/07/21/V5pl3xvtk2Omnf7.png"></p></li><li><p>设置同步</p><p>现在可以点击你已登录的账户然后选择同步项了：</p><p><img src="https://i.loli.net/2020/07/21/4FuC3gKqiLlzOZs.png"></p></li></ul><h3 id="动态壁纸（24h）"><a href="#动态壁纸（24h）" class="headerlink" title="动态壁纸（24h）"></a>动态壁纸（24h）</h3><blockquote><p>​    这里的动态壁纸，是指的像<code>MacOS</code>里面的<code>24h</code>动态壁纸，壁纸会随着时间的推移而有不同的表现。如果想要将壁纸设置为动画，可以参考下节。</p></blockquote><p><a href="https://technastic.com/macos-mojave-dynamic-wallpaper-on-linux/">参考</a></p><ul><li><p>下载<code>macOS Mojave</code>壁纸</p><p>下载地址：<a href="https://files.rb.gd/mojave_dynamic.zip"><strong>mojave_dynamic.zip</strong></a></p><p>将压缩包里面的内容提取到<code>~/Pictures/wallpapers</code>里，然后将文件夹重命名为<strong>mojave-background</strong>。最后的文件路径将会是：</p><pre class="line-numbers language-bash"><code class="language-bash">/home/black/Pictures/wallpapers/mojave-background/├── __MACOSX├── mojave_dynamic_10.jpeg├── mojave_dynamic_11.jpeg├── mojave_dynamic_12.jpeg├── mojave_dynamic_13.jpeg├── mojave_dynamic_14.jpeg├── mojave_dynamic_15.jpeg├── mojave_dynamic_16.jpeg├── mojave_dynamic_1.jpeg├── mojave_dynamic_2.jpeg├── mojave_dynamic_3.jpeg├── mojave_dynamic_4.jpeg├── mojave_dynamic_5.jpeg├── mojave_dynamic_6.jpeg├── mojave_dynamic_7.jpeg├── mojave_dynamic_8.jpeg└── mojave_dynamic_9.jpeg1 directory, 16 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取XML脚本</p><p>下载地址：<a href="https://gist.githubusercontent.com/trongthanh/7d632e90687e1bc219e1f3262d337702/raw/8659a5432ad1ace0de3c8062435400db8a68f1cf/mojave.xml"><strong>mojave.xml</strong></a></p><p>在您可以使用脚本之前，您需要在此处进行一些更改。在您选择的文本编辑器中打开xml文件。然后在脚本中查找并用你自己的用户名替换文件中的 <strong>thanh</strong>。例如，我在系统上使用的用户名是<strong>balck</strong>，因此会将文件中每一个<strong>thanh</strong>替换成<strong>black</strong>，完成后，保存。</p></li><li><p>设置<code>macOS Mojave</code>动态壁纸</p><ol><li><p>安装<code>gnome-tweak-tools</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> gnome-tweak-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>终端运行<code>gnome-tweaks</code>，在外观中选择xml文件作为壁纸：</p><p><img src="https://i.loli.net/2020/07/21/5e2aXkIHi7Gzb4Y.png"></p></li></ol></li></ul><h2 id="安装基本软件"><a href="#安装基本软件" class="headerlink" title="安装基本软件"></a>安装基本软件</h2><h3 id="备份软件TimeShift"><a href="#备份软件TimeShift" class="headerlink" title="备份软件TimeShift"></a>备份软件<code>TimeShift</code></h3><p>​    阻止人们使用<code>Linux</code>系统的一个大原因我觉得是怕搞坏，即使在使用了<code>Linux</code>系统几年的我身上也是比较怕，所以，我们需要有良好的备份习惯。</p><p>​    <code>TimeShift</code>这个软件支持GUI，对新手很友好，也支持<strong>增量备份</strong>。下面是这个软件的介绍信息：</p><blockquote><p>DESCRIPTION<br>       timeshift  is a system restore utility which takes snapshots of<br>       the system at regular intervals. These  snapshots  can  be  re‐<br>       stored  at  a later date to undo system changes. Creates incre‐<br>       mental snapshots using rsync or  BTRFS  snapshots  using  BTRFS<br>       tools.</p></blockquote><ul><li><p>安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> apt <span class="token function">install</span> timeshift<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后我们就可以在菜单看到软件了。</p></li><li><p>使用</p><p>打开软件，会有个使用向导，按照步骤走就行。在用户主目录这里，我建议是<strong>Include All Files</strong>。然后就可以开始第一次备份。要注意的是，由于是第增量备份，所以第一次备份时的时间会比较长，以后的每次备份，只会在原有的基础上修改改动的部分。</p><p>点击创建，会自动备份，备份完了大概是这样（我分配的空间较少，所以禁用了自动备份）：</p><p><img src="https://i.loli.net/2020/07/21/vlG7eTEWzVu1RNa.png"></p></li></ul><h2 id="安装deepin-win，QQ，WeChat"><a href="#安装deepin-win，QQ，WeChat" class="headerlink" title="安装deepin-win，QQ，WeChat"></a>安装deepin-win，QQ，WeChat</h2><blockquote><p>国民应用，没办法，不得不装，deepin在这方面走在了前面，有人将deepin-wine移植到了Ubuntu上，项目地址：</p><p><a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">github</a></p><p><a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu">gitee</a></p></blockquote><ul><li><p>安装<code>deepin-wine</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> deepin-wine-for-ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择合适于你的安装脚本，加可运行权限，我这里选择的是<code>install_2.8.22.sh</code>，执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x install_2.8.22.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> ./install_2.8.22.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装软件</p><p>下载并安装所需要的<code>deepin-wine</code>容器 <em>（建议在终端下使用<code>dpkg -i</code>安装容器，否则容易误报依赖错误）</em></p><ul><li><p>可使用<code>deepin</code>发布的最新版容器安装包：</p><ol><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/">QQ</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/">TIM</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/">QQ轻聊版</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/">微信</a> 如果出现依赖错误，请下载<a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.wechat_2.6.8.65deepin0_i386.deb">这个版本</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/">Foxmail</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/">百度网盘</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/">360压缩</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.com.winrar/">WinRAR</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.thunderspeed/">迅雷极速版</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.taobao.aliclient.qianniu/">千牛卖家工作台</a></p></li></ol><p>其它deepin-wine容器：<a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/">阿里云镜像下载</a></p></li><li><p>若版本不兼容，可选择下载安装以下旧版包文件：</p><ol><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.qq.im_9.1.8deepin0_i386.deb">QQ</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.qq.office_2.0.0deepin4_i386.deb">TIM</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.qq.im.light_7.9.14308deepin8_i386.deb">QQ轻聊版</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.wechat_2.6.8.65deepin0_i386.deb">微信</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.foxmail_7.2deepin3_i386.deb">Foxmail</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.baidu.pan_5.7.3deepin0_i386.deb">百度网盘</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.cn.360.yasuo_4.0.0.1060deepin3_i386.deb">360压缩</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.cn.com.winrar_5.3.0deepin2_i386.deb">WinRAR</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.thunderspeed_7.10.35.366deepin18_i386.deb">迅雷极速版</a></p></li></ol></li></ul></li><li><p>手动更改配置（winecfg）</p><p>执行 <code>WINEPREFIX=~/.deepinwine/容器名称 deepin-wine winecfg</code> 即可，也可以用此方法来调整缩放问题</p></li><li><p>解决系统非中文语言环境时软件无法设置为中文</p><p>在/opt/deepinwine/tools/run.sh 中将 WINE_CMD 那一行修改为 WINE_CMD=”LC_ALL=zh_CN.UTF-8 deepin-wine”</p></li><li><p>微信更新问题</p><p>如果出现微信提示跟新问题执行这一条语句即可</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">wget</span> -qO- https://deepin-wine.i-m.dev/setup.sh <span class="token operator">|</span> <span class="token function">sudo</span> sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><a href="https://blog.diqigan.cn/posts/wine-global-hotkey-problem.html">wine 应用程序全局快捷键无效的解决方案</a></p><ol><li><p>安装 xdotool</p><p>直接在命令行运行以下命令即可:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> --no-install-recommends xdotool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写 xdotool 脚本</p><blockquote><p>思路: Wine 应用在后台无法接收到快捷键状态, 此时借助 xdotool 向 Wine 应用发送模拟按键信息即可.</p></blockquote><p>在合适的位置新建一个脚本文件 “open_wechat.sh”, 写入以下内容:</p><pre><code>#!/bin/sh#在当前运行的应用中找到名为WeChat.exe的应用程序，并向它发送按键事件"ctrl+alt+W"#WeChat的可执行文件名为WeChat.exe，如果是其它应用程序就修改成其它应用程序的可执行文件名, 应用名称大小写敏感, 一个字母都不能错!xdotool key --window $(xdotool search --limit 1 --all --pid $(pgrep WeChat.exe)) "ctrl+alt+W"</code></pre><p>赋予脚本可执行权限:</p><pre><code>chmod +x open_wechat.sh</code></pre><p>如果此时你的微信正好运行在后台, 执行这个脚本就可以把它召唤到前台. 如果没有, 请检查脚本是否有错误。</p></li><li><p>设置快捷键</p><p>图形界面依次打开 “设置” -&gt; “设备” -&gt; “键盘”, 点击列表最底部的 “+” 号添加自定义快捷键.</p><p><a href="https://camo.githubusercontent.com/23ae69e9c1369dcc18325a989469b499dcf36f64/68747470733a2f2f696d616765732e67697465652e636f6d2f75706c6f6164732f696d616765732f323032302f303131372f3037353134315f34643137666162345f313434323533302e706e67"><img src="https://camo.githubusercontent.com/23ae69e9c1369dcc18325a989469b499dcf36f64/68747470733a2f2f696d616765732e67697465652e636f6d2f75706c6f6164732f696d616765732f323032302f303131372f3037353134315f34643137666162345f313434323533302e706e67" alt="快捷键设置"></a></p><ul><li>名称随便, 填写 “打开微信” 即可;</li></ul><ul><li>命令填写刚才编写的脚本的<strong>全路径</strong>;</li><li>快捷键设置自己想用的快捷键即可, 建议于应用内部快捷键相同;</li><li>最后点击”添加”即可.</li></ul></li></ol></li><li><p>问题记录</p><ol><li><p>微信无法发送图片</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg62:i386<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Fcitx（常见的就是搜狗）不能输入：</p><ol><li><p>找到wineQQ的安装目录，我的是在：<code>/opt/deepinwine/apps/Deepin-QQ</code>下，有个<code>run.sh</code>，vim编辑，最后一行添加：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#=================================</span><span class="token comment" spellcheck="true">#搜狗输入法输入中文的问题</span><span class="token function">export</span> XMODIFIERS<span class="token operator">=</span><span class="token string">"@im=fcitx"</span><span class="token function">export</span> GTK_IM_MODULE<span class="token operator">=</span><span class="token string">"fcitx"</span><span class="token function">export</span> QT_IM_MODULE<span class="token operator">=</span><span class="token string">"fcitx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果是<code>Gnome</code>平台，可能会出现最小化之后不能再次输入的情况，还需要输入：</p><pre class="line-numbers language-bash"><code class="language-bash">gsettings <span class="token keyword">set</span> org.gnome.settings-daemon.plugins.keyboard active <span class="token boolean">false</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>/etc/envirment</code>下添加：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> XMODIFIERS<span class="token operator">=</span><span class="token string">"@im=fcitx"</span><span class="token function">export</span> GTK_IM_MODULE<span class="token operator">=</span><span class="token string">"fcitx"</span><span class="token function">export</span> QT_IM_MODULE<span class="token operator">=</span><span class="token string">"fcitx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时也在<code>/.profile</code>下加入。</p></li></ol></li></ol></li></ul><h2 id="更改键盘映射"><a href="#更改键盘映射" class="headerlink" title="更改键盘映射"></a>更改键盘映射</h2><p>这里介绍一般方法，并举出一个例子。</p><ol><li><p>找到你需要改键的<code>ketcode</code></p><p>输入命令<code>xev</code>，就能捕捉到一切动作，从中找出<code>keycode</code></p></li><li><p>导出目前使用的键盘映射</p><pre class="line-numbers language-bash"><code class="language-bash">xmodmap -pke <span class="token operator">></span> ~/.Xmodmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改文件</p><p>我将键盘上的大小写键改成了方向键→，于是编辑文件，首行加上</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">clear</span> Lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把<code>keycode  66</code>改成<code>keycode  66 = Right NoSymbol Right</code></p><p>结尾上：</p><pre class="line-numbers language-bash"><code class="language-bash">add Lock <span class="token operator">=</span> Caps_Lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生效</p><pre class="line-numbers language-bash"><code class="language-bash">xmodmap ~/.Xmodmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自动激活</p><p>编辑<code>~/.xinitrc</code></p></li></ol><h2 id="zip解压乱码"><a href="#zip解压乱码" class="headerlink" title="zip解压乱码"></a>zip解压乱码</h2><h3 id="unzip解决方案："><a href="#unzip解决方案：" class="headerlink" title="unzip解决方案："></a>unzip解决方案：</h3><pre class="line-numbers language-bash"><code class="language-bash">unzip -O cp936 ./1.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="安装zsh的包管理器antigen"><a href="#安装zsh的包管理器antigen" class="headerlink" title="安装zsh的包管理器antigen"></a>安装zsh的包管理器<code>antigen</code></h3><pre class="line-numbers language-bash"><code class="language-bash">curl -L git.io/antigen <span class="token operator">></span> .antigen.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-bash"><code class="language-bash">vim .zshrc<span class="token comment" spellcheck="true"># 写入</span><span class="token function">source</span> /home/black/Tools/antigen.zsh<span class="token comment" spellcheck="true"># 加载oh-my-zsh库</span>antigen use oh-my-zsh<span class="token comment" spellcheck="true"># 加载原版oh-my-zsh中的功能(robbyrussell's oh-my-zsh).</span>antigen bundle <span class="token function">git</span>antigen bundle herokuantigen bundle pipantigen bundle leinantigen bundle command-not-found<span class="token comment" spellcheck="true"># 语法高亮功能</span>antigen bundle zsh-users/zsh-syntax-highlighting<span class="token comment" spellcheck="true"># 代码提示功能</span>antigen bundle zsh-users/zsh-autosuggestions<span class="token comment" spellcheck="true"># 自动补全功能</span>antigen bundle zsh-users/zsh-completions<span class="token comment" spellcheck="true"># 加载主题</span><span class="token comment" spellcheck="true">#antigen theme robbyrussell</span>antigen theme romkatv/powerlevel10k<span class="token comment" spellcheck="true"># 保存更改</span>antigen apply<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用别名alias"><a href="#使用别名alias" class="headerlink" title="使用别名alias"></a>使用别名alias</h2><ol><li><p>确保<code>.bashrc</code>中有这一段：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Alias definitions.</span><span class="token comment" spellcheck="true"># You may want to put all your additions into a separate file like</span><span class="token comment" spellcheck="true"># ~/.bash_aliases, instead of adding them here directly.</span><span class="token comment" spellcheck="true"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -f ~/.bash_aliases <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">.</span> ~/.bash_aliases<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑<code>~/.bash_aliases</code></p><blockquote><p>没有就自己创建</p></blockquote><p>比如：写上</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">alias</span> nvrun<span class="token operator">=</span><span class="token string">"__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查成功</p></li></ol><blockquote><p>如果你是使用的是Zsh，那么将第一步的代码添加到<code>.zshrc</code>里面，然后执行后面的步骤。</p></blockquote><h2 id="启动时自动使用独显"><a href="#启动时自动使用独显" class="headerlink" title="启动时自动使用独显"></a>启动时自动使用独显</h2><blockquote><p>添加别名已经讲过了</p></blockquote><ol><li><p>添加别名</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">alias</span> nvrun<span class="token operator">=</span><span class="token string">"__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-bash"><code class="language-bash">nvrun steam<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="steam-play-玩游戏时使用独显"><a href="#steam-play-玩游戏时使用独显" class="headerlink" title="steam play 玩游戏时使用独显"></a>steam play 玩游戏时使用独显</h2><p>游戏启动项加上<code>WINEDLLOVERRIDES="dxgi=n" %command%</code>这句</p><h2 id="终端显示彩色emoji"><a href="#终端显示彩色emoji" class="headerlink" title="终端显示彩色emoji"></a>终端显示彩色emoji</h2><h3 id="Choose-font"><a href="#Choose-font" class="headerlink" title="Choose font"></a>Choose font</h3><p>First of all, you need to choose a font. I prefer <a href="https://www.google.com/get/noto/#emoji-zsye-color">Noto Color Emoji</a>, which is a font used to display emojis on Android. The font was <a href="https://github.com/googlei18n/noto-emoji/commit/91dc393ca4f4a924f4f6b06bf8e4407b30c7bdd9">recently updated</a> with <a href="https://medium.com/google-design/redesigning-android-emoji-cb22e3b51cc6">normal faces</a> instead of old controversial blobs. But if you’ve been using Android since ages and like those, you always can install an older version of the same font. An alternative option would be an <a href="https://www.emojione.com/">Emoji One font</a>, which is also good, especially its third version.</p><h3 id="Tell-system-you-prefer-this-font-to-render-emoji"><a href="#Tell-system-you-prefer-this-font-to-render-emoji" class="headerlink" title="Tell system you prefer this font to render emoji"></a>Tell system you prefer this font to render emoji</h3><p>Next, you need to create a file <code>~/.config/fontconfig/fonts.conf</code> with following content:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fontconfig</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>serif<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prefer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>Noto Color Emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prefer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alias</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>sans-serif<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prefer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>Noto Color Emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prefer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alias</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>monospace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prefer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>family</span><span class="token punctuation">></span></span>Noto Color Emoji<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>family</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prefer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alias</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fontconfig</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To apply new configuration, run <code>fc-cache -f -v</code> in Terminal.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
