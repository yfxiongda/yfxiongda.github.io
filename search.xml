<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux系统编程(一):Linux基础知识补充</title>
      <link href="2021/05/09/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-%E4%B8%80-Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
      <url>2021/05/09/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B-%E4%B8%80-Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1章：Linux操作系统编程基础知识补充"><a href="#第-1章：Linux操作系统编程基础知识补充" class="headerlink" title="第 1章：Linux操作系统编程基础知识补充"></a>第 1章：Linux操作系统编程基础知识补充</h1><blockquote><p>课程视频：<a href="https://www.bilibili.com/video/BV1KE411q7ee?p=35">黑马程序员 - Linux系统编程</a></p></blockquote><h2 id="1-1-基础命令"><a href="#1-1-基础命令" class="headerlink" title="1.1 基础命令"></a>1.1 基础命令</h2><ul><li><p><code>cd</code> 命令</p><p><code>cd -</code> 在当前目录和上一个目录之间切换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token builtin class-name">cd</span> /etc/nginx❯ <span class="token builtin class-name">cd</span> ~/my_code❯ <span class="token builtin class-name">cd</span> -/etc/nginx❯ <span class="token builtin class-name">pwd</span>/etc/nginx❯ <span class="token builtin class-name">cd</span> -~/my_code❯ <span class="token builtin class-name">pwd</span>/home/black/my_code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>ls</code>命令</p><p><code>ls -R</code> 递归显示当前目录下文件和文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token builtin class-name">cd</span> Downloads❯ <span class="token function">ls</span> -R.:Compressed  Documents  Music  Programs  Video./Compressed:Hack.zip./Documents:cryptous.pdf  PDF_611399243.html./Music:./Programs:code-server_3.8.0_amd64.deb./Video:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-文件和用户"><a href="#1-2-文件和用户" class="headerlink" title="1.2 文件和用户"></a>1.2 文件和用户</h2></li></ul><table><thead><tr><th align="center">名称</th><th align="center">ls -l 中的表示</th></tr></thead><tbody><tr><td align="center">普通文件</td><td align="center">-</td></tr><tr><td align="center">目录文件</td><td align="center">d</td></tr><tr><td align="center">字符设备文件</td><td align="center">c</td></tr><tr><td align="center">块设备文件</td><td align="center">b</td></tr><tr><td align="center">软链接</td><td align="center">l</td></tr><tr><td align="center">管道文件</td><td align="center">p</td></tr><tr><td align="center">套接字</td><td align="center">s</td></tr></tbody></table><ul><li><p><code>chmod</code>命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token punctuation">[</span>who<span class="token punctuation">]</span> <span class="token punctuation">[</span>+<span class="token operator">|</span>-<span class="token operator">|</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>mode<span class="token punctuation">]</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>who</code>可以是下面字母中的任意一个或者他们的组合：</p><ul><li>u : 表示用户，即文件或目录的所有者</li><li>g : 表示同组用户，即与文件属主有相同ID的所有用户</li><li>o : 表示其他用户</li><li>a : 表示所有用户，是系统默认值</li></ul><p>操作符号可以是：</p><ul><li>+: 添加某个权限</li><li>-: 取消某个权限</li><li>=: 赋予给定权限并取消其他所有权限</li></ul><p><code>mod</code> 即可读可写可执行的任意组合</p></li><li><p><code>tar</code>命令</p><ul><li><code>-c</code>：创建新的档案文件</li><li><code>-r</code>：把要存档的文件追加到档案文件的末尾</li><li><code>-t</code>：列出档案文件内容，查看档案包中的文件</li><li><code>-u</code>：更新文件。用新增的文件取代原档案文件，如果在档案文件中找不到要更新的文件，则把他追加到档案文件的最后</li><li><code>-x</code>：从档案文件中释放文件</li><li><code>-z</code>：使用<code>gzip</code>进行压缩</li><li><code>-j</code>：使用<code>bzip2</code>方式压缩</li></ul><p>常用创建压缩文件的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zcvf compress.tar.gz file1 file2 dir1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用解压缩文件命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -jcvf compress.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>rar</code>和<code>unrar</code></p><p>压缩文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rar</span> a -r compress.rar file1 dir2 file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unrar</span> x compress.rar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>zip</code>和<code>unzip</code></p><p>压缩文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zip</span> -r compress.zip file1 dir1 file3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压缩文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> compress.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-3-搜索"><a href="#1-3-搜索" class="headerlink" title="1.3 搜索"></a>1.3 搜索</h2></li><li><p><code>chown</code>命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token punctuation">[</span>OWNER:GROUP<span class="token punctuation">]</span> FILE <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>OPTION</code> 的主要参数：</p><ul><li>-R：递归地改变指定目录及其下的所有子目录和文件的拥有者。</li><li>-v：显示<code>chown</code>命令所做的工作。</li></ul></li><li><p><code>find</code>命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token punctuation">[</span>PATHNAME<span class="token punctuation">]</span> <span class="token punctuation">[</span>-OPTIONS: -print -exec -ok -name -type <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-name</code> ：按文件名搜索</li><li><code>-maxdepth</code>：指定搜索深度</li><li><code>-size</code>：按文件大小搜索：k、M、G</li><li><code>-atime、-mtime、-ctime</code>：accsess time访问时间、mod change属性更改时间、change time文件内容更改时间</li><li><code>-type</code>：按文件类型搜索。d/p/s/c/b/l/f(文件)</li></ul><p>扩展</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /usr/ -name <span class="token string">'*tmp*'</span> -exec <span class="token function">rm</span> -r <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token function">find</span> /usr/ -name <span class="token string">'*tmp*'</span> -ok <span class="token function">rm</span> -r <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果查找的文件名中有空格，同时又想利用<code>xargs</code>管道的话：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> ./ <span class="token builtin class-name">type</span> f print0 <span class="token operator">|</span> <span class="token function">xargs</span> -0 <span class="token function">ls</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>grep</code> 命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> PATTERN <span class="token punctuation">[</span>FILE<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-r</code>：递归搜索</p><p><code>-n</code>：显示行号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">cat</span> abckkfdasjfklasfjhello<span class="token operator">!</span> worlddfasjfklasnflk<span class="token number">2131312</span>❯ <span class="token function">grep</span> <span class="token string">"hello\!"</span> ./ -rn./abc:2:hello<span class="token operator">!</span> world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>xargs</code></p><p>有时后面的命令不接受管道，此时可以添加<code>xargs</code>实现。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">ls</span> -l总用量 <span class="token number">108</span>-rw-r--r-- <span class="token number">1</span> black black    <span class="token number">51</span>  <span class="token number">1</span>月 <span class="token number">20</span> <span class="token number">15</span>:58 abc-rw-r--r-- <span class="token number">1</span> black black <span class="token number">98571</span>  <span class="token number">1</span>月 <span class="token number">14</span> <span class="token number">12</span>:05 blog.WordPress.2021-01-14.xmldrwxr-xr-x <span class="token number">2</span> black black  <span class="token number">4096</span>  <span class="token number">1</span>月 <span class="token number">20</span> <span class="token number">16</span>:01 temp❯ <span class="token function">find</span> ./ -type f <span class="token operator">|</span> <span class="token function">ls</span> -l总用量 <span class="token number">108</span>-rw-r--r-- <span class="token number">1</span> black black    <span class="token number">51</span>  <span class="token number">1</span>月 <span class="token number">20</span> <span class="token number">15</span>:58 abc-rw-r--r-- <span class="token number">1</span> black black <span class="token number">98571</span>  <span class="token number">1</span>月 <span class="token number">14</span> <span class="token number">12</span>:05 blog.WordPress.2021-01-14.xmldrwxr-xr-x <span class="token number">2</span> black black  <span class="token number">4096</span>  <span class="token number">1</span>月 <span class="token number">20</span> <span class="token number">16</span>:01 temp❯ <span class="token function">find</span> ./ -type f <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ls</span> -l-rw-r--r-- <span class="token number">1</span> black black    <span class="token number">51</span>  <span class="token number">1</span>月 <span class="token number">20</span> <span class="token number">15</span>:58 ./abc-rw-r--r-- <span class="token number">1</span> black black <span class="token number">98571</span>  <span class="token number">1</span>月 <span class="token number">14</span> <span class="token number">12</span>:05 ./blog.WordPress.2021-01-14.xml❯ <span class="token function">find</span> ./ -type f <span class="token operator">|</span> <span class="token function">grep</span> ab./abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-GCC补充知识"><a href="#1-4-GCC补充知识" class="headerlink" title="1.4 GCC补充知识"></a>1.4 <code>GCC</code>补充知识</h2></li><li><p><code>gcc</code>编译可执行程序的步骤：</p><p><img src="https://i.loli.net/2021/05/09/bhCnOsjJ7qdGy5V.png" alt="1.4_1"></p></li><li><p><code>gcc</code>常用参数：</p><ul><li><p><code>-I [directory]</code>：指定头文件目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">cat</span> hello.c<span class="token comment">#include&lt;hello.h&gt;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                printf<span class="token punctuation">(</span><span class="token string">"nihao<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>❯ <span class="token function">cat</span> inc/hello.h<span class="token comment">#include&lt;stdio.h&gt;</span>❯ gcc hello.c -o hellohello.c:1:9: 致命错误：hello.h：没有那个文件或目录    <span class="token number">1</span> <span class="token operator">|</span> <span class="token comment">#include&lt;hello.h&gt;</span>      <span class="token operator">|</span>         ^~~~~~~~~编译中断。❯ gcc hello.c -o hello -I ./inc/❯ ./hellonihao❯<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>-c</code>：只做预处理、编译、汇编操作，生成<code>.o</code>二进制文件，不进行链接</p></li><li><p><code>-g</code>：包含调试信息</p></li><li><p><code>-O[n]</code>：<code>n</code>可取0～3，<code>n</code>越大，优化越多</p></li><li><p><code>-Wall</code>：提示更多警告信息</p></li><li><p><code>-E</code>：生成预处理文件</p></li><li><p><code>-D[DEF]</code>：编译时定义宏</p></li><li><p><code>-l</code>：指定动态库名</p></li><li><p><code>-L</code>：指定动态库路径</p></li></ul></li></ul><h2 id="1-5-其他命令"><a href="#1-5-其他命令" class="headerlink" title="1.5 其他命令"></a>1.5 其他命令</h2><ul><li><p><code>jobs</code>、<code>fg</code>、<code>bg</code></p><ul><li><code>jobs</code>用来显示当前shell下正在运行那些作业。</li><li><code>fg</code>切换到前台</li></ul><p>示例如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ kolourpaint <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">481488</span>❯ <span class="token function">jobs</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  + running    kolourpaint❯ <span class="token function">fg</span> kolourpaint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  + <span class="token number">483544</span> running    kolourpaint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>man</code></p><p>使用中需要注意的一点是，有很多重名的函数，比如<code>shell</code>编程中和<code>c</code>语言中都有<code>prinrf</code>这个函数，直接使用<code>man printf</code>可能不是我们想要的信息，因此需要注意章节信息。</p><ul><li><p><code>man man</code> ：查看章节以及帮助信息</p></li><li><p><code>man read</code>：查看<code>read</code>命令的 man page</p></li><li><p><code>man 3 printf</code>：查看程序库函数函数中<code>printf</code>的信息。（即在第三个 section 中，表示为 <code>printf(3)</code>）。</p></li><li><p><code>man -k printf</code>：以<code>printf</code>为关键字查找相关的 man page.</p></li></ul><p>附章节信息如下（可通过<code>man man</code>查看）：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1  可执行程序或 shell 命令 2  系统调用(内核提供的函数) 3  库调用(程序库中的函数) 4  特殊文件(通常位于 /dev) 5  文件格式和规范，如  /etc/passwd 6  游戏 7  杂项(包括宏包和规范，如 **man**(7)，**groff**(7)) 8  系统管理命令(通常只针对 root 用户) 9  内核例程 [非标准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="1-6-vim的实用补充："><a href="#1-6-vim的实用补充：" class="headerlink" title="1.6 vim的实用补充："></a>1.6 <code>vim</code>的实用补充：</h2><ul><li><p>命令模式：</p><ul><li><code>I</code>：光标跳转到行首并跳转到编辑插入模式。</li><li><code>A</code>：光标跳转到行尾并跳转到编辑插入模式。</li><li><code>ci"</code>：删除双引号中间的所有内容并进入编辑模式，i有<code>in</code>的意思，可以配合其他使用。</li><li><code>fw</code>：光标跳转到w。</li><li><code>s</code>：删除光标所在字符并跳转到编辑插入模式。</li><li><code>S</code>：删除光标所在行并跳转到编辑插入模式。</li><li><code>gg=G</code>：格式化代码。</li><li><code>%</code>：光标如果在成对的符号上（如大括号、小括号、注释的斜线）则会跳转到下一个与其对应的下一个符号上，如果光标字在函数名上，则会跳转到括号上。</li><li><code>dw</code>：删除光标所在的单词</li><li><code>D</code>：从光标处删除至行尾</li><li><code>0</code>：光标跳转到行首</li><li><code>d0</code>：从光标删除至行首</li><li><code>$</code>：光标跳转到行尾</li><li><code>3dd</code>：从光标处行开始往下删除3行</li><li><code>3yy</code>：从光标行开始向下复制3行</li><li><code>*</code>：光标至于字符（单词）上，查找下一个与此匹配的字符（单词）。</li><li><code>#</code>：与<code>*</code>作用相同，但是是向前搜索。</li><li><code>&gt;&gt;</code>和<code>&lt;&lt;</code>：光标所在行向右或者向左缩进一次</li><li><code>[Ctrl+]ww</code>：在不同分屏窗口之间切换</li><li><code>3K</code>：跳转到光标所在单词的<code>man page</code>，其中3表示字在<code>man page</code>的第三章查找</li><li><code>[d</code>：查看光标所在单词的宏定义</li></ul></li><li><p>末行模式：</p><ul><li><code>s /name1/name2/g</code>：将光标所在行的所有<code>name1</code>替换成<code>name2</code>。</li><li><code>s /name1/name2</code>：将光标所在行的出现的第一个<code>name1</code>替换成<code>name2</code>。</li><li><code>%s /name1/name2/g</code>：将文件中所有出现的<code>name1</code>替换成<code>name2</code>。</li><li><code>%s /name1/name2</code>：将文件中每一行第一个出现的<code>name1</code>替换成<code>name2</code>。</li><li><code>5, 9s /name1/name2/g</code>：自第5行起至第9行所有出现的<code>name1</code>替换成<code>name2</code></li><li><code>sp</code>和<code>vsp</code>：上下分屏和左右分屏</li><li><code>qall</code>：退出所有分屏</li></ul></li><li><p>可视模式</p><ul><li><code>[shift]+v</code>：进入行可视模式，一次选中一行。</li><li><code>ctrl+v</code>：可视块模式。</li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu部署lamp环境</title>
      <link href="2021/05/08/Ubuntu%E9%83%A8%E7%BD%B2lamp%E7%8E%AF%E5%A2%83/"/>
      <url>2021/05/08/Ubuntu%E9%83%A8%E7%BD%B2lamp%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu20-04安装lamp基础环境"><a href="#Ubuntu20-04安装lamp基础环境" class="headerlink" title="Ubuntu20.04安装lamp基础环境"></a>Ubuntu20.04安装lamp基础环境</h1><h2 id="我的设备："><a href="#我的设备：" class="headerlink" title="我的设备："></a>我的设备：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ neofetch            .-/+oossssoo+/-.               black@black-OMEN         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           ----------------       -+ssssssssssssssssssyyssss+-         OS: Ubuntu <span class="token number">20.04</span> LTS x86_64     .ossssssssssssssssssdMMMNysssso.       Host: OMEN by HP Laptop    /ssssssssssshdmmNNmmyNMMMMhssssss/      Kernel: <span class="token number">5.4</span>.0-40-generic   +ssssssssshmydMMMMMMMNddddyssssssss+     Uptime: <span class="token number">1</span> hour, <span class="token number">58</span> mins  /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Packages: <span class="token number">1637</span> <span class="token punctuation">(</span>dpkg<span class="token punctuation">)</span>, <span class="token number">11</span> <span class="token punctuation">(</span>snap<span class="token punctuation">)</span> .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Shell: <span class="token function">bash</span> <span class="token number">5.0</span>.16 +sssshhhyNMMNyssssssssssssyNMMMysssssss+   Resolution: 1920x1080 ossyNMMMNyMMhsssssssssssssshmmmhssssssso   DE: GNOME ossyNMMMNyMMhsssssssssssssshmmmhssssssso   WM: Mutter +sssshhhyNMMNyssssssssssssyNMMMysssssss+   WM Theme: Adwaita .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Theme: Yaru-dark <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>  /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/    Icons: Yaru <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>   +sssssssssdmydMMMMMMMMddddyssssssss+     Terminal: gnome-terminal    /ssssssssssshdmNNNNmyNMMMMhssssss/      CPU: Intel i5-7300HQ <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> @ <span class="token number">3</span>.500GHz     .ossssssssssssssssssdMMMNysssso.       GPU: Intel HD Graphics <span class="token number">630</span>       -+sssssssssssssssssyyyssss+-         GPU: NVIDIA GeForce GTX <span class="token number">1050</span> Mobile         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           Memory: 2511MiB / 11867MiB             .-/+oossssoo+/-.                                                                                                                                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装php-php-fpm-apache2-Nginx-mariadb-server"><a href="#安装php-php-fpm-apache2-Nginx-mariadb-server" class="headerlink" title="安装php, php-fpm, apache2(Nginx), mariadb-server"></a>安装php, php-fpm, apache2(Nginx), mariadb-server</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> php php-fpm apache2 mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置mariadb-server"><a href="#配置mariadb-server" class="headerlink" title="配置mariadb-server"></a>配置mariadb-server</h3><ul><li><p>注意 <strong>root</strong> 运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> mysql_secure_installation<span class="token comment"># 首先会让你输入密码，因为是初次安装，所以直接回车即可</span><span class="token comment"># 然后会让你设置root密码，并确认</span><span class="token comment"># 之后的，一路回车即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此处不 <strong>root</strong> 运行<code>mysql_secure_installation</code>是会说你密码错误的。</p></li><li><p>运行服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> <span class="token function">service</span> mariadb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入试试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> mysql -u root -pEnter password: Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MariaDB connection <span class="token function">id</span> is <span class="token number">60</span>Server version: <span class="token number">10.3</span>.22-MariaDB-1ubuntu1 Ubuntu <span class="token number">20.04</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2018</span>, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span>+--------------------+<span class="token number">3</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.001</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此成功。</p></li></ul><h3 id="配置apache2和php-fpm"><a href="#配置apache2和php-fpm" class="headerlink" title="配置apache2和php-fpm"></a>配置apache2和php-fpm</h3><ul><li><p>首先停止这两个的服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">sudo</span> <span class="token function">service</span> apache2 stopblack@black-OMEN:~$ <span class="token function">sudo</span> <span class="token function">service</span> php7.4-fpm stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编辑apache2配置文件</p><p>首先看下目录结构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ <span class="token builtin class-name">cd</span> /etc/apache2/black@black-OMEN:/etc/apache2$ <span class="token function">ls</span>apache2.conf  conf-available  conf-enabled  envvars  magic  mods-available  mods-enabled  ports.conf  sites-available  sites-enabledblack@black-OMEN:/etc/apache2$ tree conf-available/conf-available/├── charset.conf├── localized-error-pages.conf├── other-vhosts-access-log.conf├── php7.4-fpm.conf├── security.conf└── serve-cgi-bin.conf<span class="token number">0</span> directories, <span class="token number">6</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面可以看到，在<code>conf-available</code>中已经有配置好的文件。那怎么让它生效呢？看下<code>conf-enabled</code>目录结构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:/etc/apache2$ tree conf-enabled/conf-enabled/├── charset.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/charset.conf├── localized-error-pages.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/localized-error-pages.conf├── other-vhosts-access-log.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/other-vhosts-access-log.conf├── security.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/security.conf└── serve-cgi-bin.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/serve-cgi-bin.conf<span class="token number">0</span> directories, <span class="token number">5</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可发现，实际上<code>conf-enabled</code>就是<code>conf-available</code>里的软连接，因此，<strong>我们只需要在<code>conf-enabled</code>里创建<code>conf-available/php7.4-fpm.conf</code>的软链接即可</strong>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:/etc/apache2$ <span class="token builtin class-name">cd</span> conf-enabled/black@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> <span class="token function">ln</span> -s <span class="token punctuation">..</span>/conf-available/php7.4-fpm.conf <span class="token comment"># 此时查看enabled情况，发现已经被添加到了。</span>black@black-OMEN:/etc/apache2/conf-enabled$ tree <span class="token builtin class-name">.</span><span class="token builtin class-name">.</span>├── charset.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/charset.conf├── localized-error-pages.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/localized-error-pages.conf├── other-vhosts-access-log.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/other-vhosts-access-log.conf├── php7.4-fpm.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/php7.4-fpm.conf├── security.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/security.conf└── serve-cgi-bin.conf -<span class="token operator">&gt;</span> <span class="token punctuation">..</span>/conf-available/serve-cgi-bin.conf<span class="token number">0</span> directories, <span class="token number">6</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>因为我这里装的正好就是<code>php7.4-fpm</code>，而且是通过<code>apt</code>装的，所以使用默认即可，如果你不是用的默认的，则还需要修改下<code>php7.4-fpm.conf</code>中的参数。</p></li><li><p>重启服务，测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动服务</span>black@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> <span class="token function">service</span> apache2 restartblack@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> <span class="token function">service</span> php7.4-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试<code>html</code></p><pre class="line-numbers language-none"><code class="language-none">black@black-OMEN:/etc/apache2/conf-enabled$ sudo vim /var/www/html/test.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时若访问<a href="localhost/test.html">localhost/test.html</a>配置即完成。</p><p>测试<code>.php</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:/etc/apache2/conf-enabled$ <span class="token function">sudo</span> <span class="token function">vim</span> /var/www/html/test.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时若访问<a href="localhost/test.php">localhost/test.php</a>配置即完成。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用案例</title>
      <link href="2021/05/08/Docker%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
      <url>2021/05/08/Docker%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker使用案例"><a href="#Docker使用案例" class="headerlink" title="Docker使用案例"></a>Docker使用案例</h1><blockquote><p>来自: 布菜克先生</p></blockquote><h2 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h2><p><a href="https://docs.docker.com/v17.09/engine/installation/linux/docker-ce/ubuntu/">官方文档</a></p><h2 id="使用Docker来安装OwnCloud"><a href="#使用Docker来安装OwnCloud" class="headerlink" title="使用Docker来安装OwnCloud"></a>使用Docker来安装OwnCloud</h2><p>参见：<a href="https://www.jianshu.com/p/f09194ff94d5">简书</a></p><h4 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h4><ol><li><p>拉取OwnCloud的官方docker镜像</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull owncloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 需要用root用户拉取，否则会有警告：</p> <pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">Warning<span class="token punctuation">:</span> failed to <span class="token keyword">get</span> <span class="token keyword">default</span> registry endpoint <span class="token keyword">from</span> daemon <span class="token punctuation">(</span>Cannot connect to the Docker daemon<span class="token punctuation">.</span> Is the docker daemon running <span class="token keyword">on</span> <span class="token keyword">this</span> host<span class="token punctuation">?</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Using system <span class="token keyword">default</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>index<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>io<span class="token operator">/</span>v1<span class="token operator">/</span>Cannot connect to the Docker daemon<span class="token punctuation">.</span> Is the docker daemon running <span class="token keyword">on</span> <span class="token keyword">this</span> host<span class="token punctuation">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>改用MySQL数据库</p><p> <code>owncloud</code> 默认使用 <code>SQLite</code> 数据库，官方建议选择另外一个不同的数据库，特别当使用桌面客户端同步文件时，不鼓励使用 <code>SQLite</code>。</p><p> 拉取 <code>mysql</code> 官方docker镜像</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 启动 MySQL 容器，用作 owncloud 容器的数据库。</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name my-mysql -p <span class="token number">3306</span>:3306 -v /var/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token string">"123456"</span> -d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这里的密码为123456，端口是默认的<code>3306</code>，也可以用 <code>-p 宿主机映射端口:容器运行端口</code>来指定</p></li><li><p>启动 owncloud 容器</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name owncloud -p <span class="token number">5679</span>:80   -v /data/db/owncloud:/var/www/html/data --link my-mysql:mysql -d owncloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <code>-p 5679:80</code> 将容器的80端口映射到宿主局的5679端口。</p><p> <code>--link my-mysql:mysql</code> ：将 <code>owncloud容器(客户)</code> 链接到 <code>my-mysql容器(服务)</code>，链接别名：<code>mysql</code>。</p></li><li><p>配置 nginx 反向代理</p><p> 在 <code>etc/nginx/nginx.conf</code> 的 <code>http{}</code> 段写入:</p> <pre class="line-numbers language-php" data-language="php"><code class="language-php">upstream pan_server<span class="token punctuation">{</span>    server  <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">5679</span><span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen   <span class="token number">80</span><span class="token punctuation">;</span>    server_name pan<span class="token operator">.</span>xxx<span class="token operator">.</span>com<span class="token punctuation">;</span>    access_log <span class="token operator">/</span>data<span class="token operator">/</span>logs<span class="token operator">/</span>nginx<span class="token operator">/</span>pan<span class="token operator">.</span>xxx<span class="token operator">.</span>com<span class="token operator">.</span>access<span class="token operator">.</span>log<span class="token punctuation">;</span>    error_log <span class="token operator">/</span>data<span class="token operator">/</span>logs<span class="token operator">/</span>nginx<span class="token operator">/</span>pan<span class="token operator">.</span>xxx<span class="token operator">.</span>com<span class="token operator">.</span>error<span class="token operator">.</span>log<span class="token punctuation">;</span>    proxy_set_header <span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span> <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        proxy_set_header <span class="token class-name type-declaration">Host</span> <span class="token variable">$host</span><span class="token punctuation">;</span>        proxy_set_header <span class="token constant">X</span><span class="token operator">-</span>Real<span class="token operator">-</span><span class="token class-name type-declaration">IP</span> <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header <span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span> <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        add_header Cache<span class="token operator">-</span>Control  <span class="token string double-quoted-string">"no-cache"</span><span class="token punctuation">;</span>            proxy_pass <span class="token argument-name">http</span><span class="token punctuation">:</span><span class="token comment">//pan_server;</span>        limit_rate <span class="token number">256</span>m<span class="token punctuation">;</span>        client_max_body_size <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装 <code>owncloud</code></p><p>在浏览器上访问 <code>pan.xxx.com</code>，进入 owncloud 安装步骤：</p><img src="https://i.loli.net/2021/05/08/F2KdDVZO3H9cY5n.png" alt="2163345-2754a4ae5792ef7f" style="zoom: 50%;"><p>这里可能会报错误：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SQLSTATE<span class="token punctuation">[</span>HY000<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2054</span><span class="token punctuation">]</span> The server requested authentication method unknown to the client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是：</p><p>MySQL 8默认使用了新的密码验证插件：<code>caching_sha2_password</code>，而之前的PHP版本中所带的mysqlnd无法支持这种验证</p><p>解决方法两种，一种是升级PHP支持mysql8的新验证插件，另一种mysql验证方式降级。</p><ul><li><p>方法一</p><p>先进入容器终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认是没有 vi的，先装它：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，mysql 配置文件 my.cnf添加配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">default_authentication_plugin</span><span class="token operator">=</span>mysql_native_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方法二</p><p>进入容器终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在mysql下运行命令</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER 'YOURUSERNAME'@'%' IDENTIFIED WITH mysql_native_password BY 'YOURPASSWORD';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>MySQL数据库配置：</p><blockquote><p>  数据库用户：root<br>  数据库密码：123456<br>  数据库名：owncloud<br>  数据库主机：mysql 或 my-mysql</p></blockquote></li></ol><h4 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h4><p>以将上面启动 owncloud 和 mysql 容器的两个步骤合成一步完成，这里介绍 <code>docker-compose</code> 的使用。</p><ol><li><p>安装</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> -U docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>docker-compose.yml 文件编写</p> <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">version: '2'services:  owncloud:    image: owncloud    links:       - mysql:mysql    volumes:      - "/data/db/owncloud:/var/www/html/data"    ports:      - 5679:80  mysql:    image: mysql    volumes:      - "/data/db/mysql:/var/lib/mysql"    ports:      - 3306:3306    environment:      MYSQL_ROOT_PASSWORD: "123456"      MYSQL_DATABASE: ownCloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>docker-compose 运行和停止</p><p> 注意：<code>docker-compose</code> 必须在 <code>docker-compose.yml</code> 文件所在目录中执行，否则会报错</p><p> docker-compose 后台启动</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> docker-compose 查看状态</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker-compose ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> docker-compose 停止和删除</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker-compose stop</span><span class="token comment"># dcoker-compose rm</span>相当上面两条命令<span class="token comment"># dcoker-compose down</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用Dockera安装WordPress"><a href="#使用Dockera安装WordPress" class="headerlink" title="使用Dockera安装WordPress"></a>使用Dockera安装WordPress</h2></li><li><p>pull WordPress镜像</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker pull wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行MySQL</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">3306</span>:3306 --name mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建WordPress数据库</p><p> 进入容器终端</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 进入mysql</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -u root -p <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 创建数据库</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行WordPress</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker run --name wordpress --link mysql:mysql -p <span class="token number">80</span>:80 -d wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 其中别名，主机端口号根据情况自行配置</p></li><li><p> 浏览器访问即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Owncloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04初步配置教程</title>
      <link href="2021/05/08/Ubuntu20-04%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>2021/05/08/Ubuntu20-04%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍下<code>Ubuntu20.04</code>在我手上的日常使用，以及一些一本软件的安装，作为大家的参考。</p><p>我的环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ neofetch             .-/+oossssoo+/-.               black@black-OMEN         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           ----------------       -+ssssssssssssssssssyyssss+-         OS: Ubuntu <span class="token number">20.04</span> LTS x86_64     .ossssssssssssssssssdMMMNysssso.       Host: OMEN by HP Laptop    /ssssssssssshdmmNNmmyNMMMMhssssss/      Kernel: <span class="token number">5.4</span>.0-40-generic   +ssssssssshmydMMMMMMMNddddyssssssss+     Uptime: <span class="token number">46</span> mins  /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Packages: <span class="token number">1922</span> <span class="token punctuation">(</span>dpkg<span class="token punctuation">)</span>, <span class="token number">11</span> <span class="token punctuation">(</span>s .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Shell: <span class="token function">bash</span> <span class="token number">5.0</span>.16 +sssshhhyNMMNyssssssssssssyNMMMysssssss+   Resolution: 1920x1080 ossyNMMMNyMMhsssssssssssssshmmmhssssssso   DE: GNOME ossyNMMMNyMMhsssssssssssssshmmmhssssssso   WM: Mutter +sssshhhyNMMNyssssssssssssyNMMMysssssss+   WM Theme: Yaru-dark .ssssssssdMMMNhsssssssssshNMMMdssssssss.   Theme: Yaru-dark <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>  /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/    Icons: Yaru <span class="token punctuation">[</span>GTK2/3<span class="token punctuation">]</span>   +sssssssssdmydMMMMMMMMddddyssssssss+     Terminal: gnome-terminal    /ssssssssssshdmNNNNmyNMMMMhssssss/      CPU: Intel i5-7300HQ <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> @ <span class="token number">3</span>     .ossssssssssssssssssdMMMNysssso.       GPU: Intel HD Graphics <span class="token number">630</span>       -+sssssssssssssssssyyyssss+-         GPU: NVIDIA GeForce GTX <span class="token number">1050</span>         <span class="token variable"><span class="token variable">`</span>:+ssssssssssssssssss+:<span class="token variable">`</span></span>           Memory: 2699MiB / 11867MiB             .-/+oossssoo+/-.                                                                                                                                      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><blockquote><p>参考：<a href="https://loige.co/random-emoji-in-your-prompt-how-and-why/">A random emoji in your terminal prompt. How and Why!</a></p><p>参考：<a href="https://www.cnblogs.com/himonkey/p/11853487.html#%E5%AE%89%E8%A3%85%E5%AD%97%E4%BD%93"></a><a href="https://www.cnblogs.com/himonkey/p/11853487.html">Mac 终端窗口配置</a></p></blockquote><p>​    展示下我的终端：</p><p><img src="https://i.loli.net/2021/05/08/sFyWmPgZ65T2Oic.png" alt="我的终端界面"></p><h4 id="展示命令成功与否"><a href="#展示命令成功与否" class="headerlink" title="展示命令成功与否"></a>展示命令成功与否</h4><p>命令执行得正确与否会有不同的表现。编辑代码<code>~/.bashrc</code>直接添加下面的代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">success_indicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"😎"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"💩"</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"\<span class="token variable"><span class="token variable">$(</span>success_indicator<span class="token variable">)</span></span>\[<span class="token entity" title="\e">\e</span>[32;40m\]\u\[<span class="token entity" title="\e">\e</span>[m\]\[<span class="token entity" title="\e">\e</span>[32m\]@\[<span class="token entity" title="\e">\e</span>[m\]\[<span class="token entity" title="\e">\e</span>[32m\]\h\[<span class="token entity" title="\e">\e</span>[m\]:\[<span class="token entity" title="\e">\e</span>[34m\]\W\[<span class="token entity" title="\e">\e</span>[m\]👉 "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这里还使用了两个工具：<a href="http://bashrcgenerator.com/">.bashrc PS1 generator by Julien Ricard</a> 和 <a href="http://ezprompt.net/">Easy Bash PS1 Generator by Josh Matthews</a></p><h4 id="展示文件夹和文件信息"><a href="#展示文件夹和文件信息" class="headerlink" title="展示文件夹和文件信息"></a>展示文件夹和文件信息</h4><ul><li><p>安装字体</p><p>原有的字体是不能显示这么多字符的。去<a href="https://www.nerdfonts.com/font-downloads">nerdfonts</a>下载，我下载的是<strong>Hack Nerd Font</strong>。安装就行，没必要全部安装。</p><p>终端里面设置字体。</p></li><li><p>安装<code>clolorls</code></p><p>首先需要安装<code>ruby</code>等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby ruby-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> colorls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置别名</p><p><code>vim ~/.bashrc</code>添加下面两行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'colorls -lA --sd --gs --group-directories-first'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'colorls --group-directories-first'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="耳机杂音解决（Realtek-ALC295）"><a href="#耳机杂音解决（Realtek-ALC295）" class="headerlink" title="耳机杂音解决（Realtek ALC295）"></a>耳机杂音解决（Realtek ALC295）</h3><p>​    这个问题困扰了我好久了，之前装过<code>kali</code>，也出现了这样的情况，当时以为是通病，后来发现原来只有我有此问题。所以说，如果你的声音也出现了问题，可以搜索下自己的声卡型号。</p><p>​    终端输入：<code>sudo alsamixer</code>，回车，可以看到下面的信息：</p><p><img src="https://i.loli.net/2020/07/21/eyqwDLd5obJCrSf.png"></p><p>​    其中的<code>Chip</code>即是你的声卡型号。</p><p>​    我在<a href="https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/1648183">这个网站</a>找到了解决办法。首先安装<code>alsa-tools</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> alsa-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在<code>/usr/local/bin</code>下写个脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span>hda-verb /dev/snd/hwC0D0 0x20 SET_COEF_INDEX 0x67hda-verb /dev/snd/hwC0D0 0x20 SET_PROC_COEF 0x3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并加权。运行之后即时生效。</p><blockquote><p>**UPDATE: **此问题官方已修复。</p></blockquote><h3 id="设置文件夹为英文"><a href="#设置文件夹为英文" class="headerlink" title="设置文件夹为英文"></a>设置文件夹为英文</h3><p>​    刚装好的系统，如果你设置的语言是中文，那么其在家目录下面的文件夹名称全部都是中文，而我们经常要在终端里面进行切换文件夹等操作，有中文非常不方便，所以这一项是我必操作的步骤。</p><p>​    网上比较流行的一种方法是先将环境切换成英文，然后再切换成中文。特别麻烦，还要重启，也违背了<code>Linux</code>一切皆文件的思想，不知道这种方法怎么流行起来的。下面介绍我的方法</p><ul><li><p>编辑文件<code>user-dirs.dirs</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">black@black-OMEN:~$ <span class="token function">vim</span> ~/.config/user-dirs.dirs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改为：</p><p><img src="https://i.loli.net/2020/07/21/UxTCVolPB6DbuA7.png"></p></li></ul><blockquote><p>vim的安装用法可参照我的另一篇文章：<a href="http://bucaike.top/2020/05/29/%e6%88%91%e6%89%93%e5%bc%80%e6%96%b0linux%e7%b3%bb%e7%bb%9f%e7%9a%84%e6%96%b9%e5%bc%8f/">我打开新Linux系统的方式</a></p><p>vim的配置文件<code>.vimrc</code>我推荐是自己备份一下，然后需要的时候直接拷贝过去就行。</p></blockquote><p>此时，此时再直接修改文件夹名称，可以看到文件夹有对应的图标了，这说明映射关系是正确的：</p><p><img src="https://i.loli.net/2020/07/21/ZXc2kwJRuvxY7iE.png"></p><h3 id="设置账号并同步日历等"><a href="#设置账号并同步日历等" class="headerlink" title="设置账号并同步日历等"></a>设置账号并同步日历等</h3><blockquote><p>这个我个人认为很重要，我的日历上面有我的各种日程，各种终端上面，只要登陆了我这个账号，那么日程消息就会同步过去，不会错过重要的日子和人。</p><p>我用的是微软的账户，其他终端如安卓，ios 上面都比较简单，但是<code>Linux</code>上面比较麻烦一点。</p></blockquote><ul><li><p>Microsoft 应用密码</p><p>这一步应该不是必须的，但是我建议你做一下。点击此<a href="https://account.live.com/proofs/AppPassword">链接</a>，得到应用密码。</p><p>如果你没有，那么可以从<a href="https://account.microsoft.com/">微软账户</a>转到“安全性”顶部菜单），更多安全性选项，“创建”新的应用程序密码（页面中间）。</p><p>如果你不能创建，那么是因为你没有设置“双重验证”，关于如何设置双重验证，微软已经给了文档，所以不再赘述。</p></li><li><p>Evolution&amp;Evolution-ews</p><blockquote><p>这里是比较关键的一步。对于Linux用户而言，将Outlook.com日历与Gnome Shell（Gnome 3）结合使用几乎是不可能的任务，这是由于用于与Microsoft通信的EAS（Exchange Active Sync）协议所致。</p><p>现在，使用EWS（Exchange Web服务），将Outlook.com日历（还包括邮件和联系人）集成到Gnome Shell中，很简单，只需一个扩展即可。</p></blockquote><p>我们需要安装Evolution（MS Outlook的Linux替代产品）和Evolution-ews扩展。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> Evolution Evolution-ews<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登陆账户</p><p>打开“设置” ，“在线账户”，添加账号，<strong>选Microsoft Exchange</strong>（而不是“微软”）。</p><p>在这里，电子邮箱输入你的的电子邮件地址，密码填刚才的 Microsoft 应用密码，展开“自定义”区域，再次输入您的电子邮件地址<strong>（与上面相同）作为用户名</strong>，重要的是输入Outlook.office365.com 作为服务器。然后点击“连接”。</p><p><img src="https://i.loli.net/2020/07/21/V5pl3xvtk2Omnf7.png"></p></li><li><p>设置同步</p><p>现在可以点击你已登录的账户然后选择同步项了：</p><p><img src="https://i.loli.net/2020/07/21/4FuC3gKqiLlzOZs.png"></p></li></ul><h3 id="动态壁纸（24h）"><a href="#动态壁纸（24h）" class="headerlink" title="动态壁纸（24h）"></a>动态壁纸（24h）</h3><blockquote><p>​    这里的动态壁纸，是指的像<code>MacOS</code>里面的<code>24h</code>动态壁纸，壁纸会随着时间的推移而有不同的表现。如果想要将壁纸设置为动画，可以参考下节。</p></blockquote><p><a href="https://technastic.com/macos-mojave-dynamic-wallpaper-on-linux/">参考</a></p><ul><li><p>下载<code>macOS Mojave</code>壁纸</p><p>下载地址：<a href="https://files.rb.gd/mojave_dynamic.zip"><strong>mojave_dynamic.zip</strong></a></p><p>将压缩包里面的内容提取到<code>~/Pictures/wallpapers</code>里，然后将文件夹重命名为<strong>mojave-background</strong>。最后的文件路径将会是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/home/black/Pictures/wallpapers/mojave-background/├── __MACOSX├── mojave_dynamic_10.jpeg├── mojave_dynamic_11.jpeg├── mojave_dynamic_12.jpeg├── mojave_dynamic_13.jpeg├── mojave_dynamic_14.jpeg├── mojave_dynamic_15.jpeg├── mojave_dynamic_16.jpeg├── mojave_dynamic_1.jpeg├── mojave_dynamic_2.jpeg├── mojave_dynamic_3.jpeg├── mojave_dynamic_4.jpeg├── mojave_dynamic_5.jpeg├── mojave_dynamic_6.jpeg├── mojave_dynamic_7.jpeg├── mojave_dynamic_8.jpeg└── mojave_dynamic_9.jpeg<span class="token number">1</span> directory, <span class="token number">16</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取XML脚本</p><p>下载地址：<a href="https://gist.githubusercontent.com/trongthanh/7d632e90687e1bc219e1f3262d337702/raw/8659a5432ad1ace0de3c8062435400db8a68f1cf/mojave.xml"><strong>mojave.xml</strong></a></p><p>在您可以使用脚本之前，您需要在此处进行一些更改。在您选择的文本编辑器中打开xml文件。然后在脚本中查找并用你自己的用户名替换文件中的 <strong>thanh</strong>。例如，我在系统上使用的用户名是<strong>balck</strong>，因此会将文件中每一个<strong>thanh</strong>替换成<strong>black</strong>，完成后，保存。</p></li><li><p>设置<code>macOS Mojave</code>动态壁纸</p><ol><li><p>安装<code>gnome-tweak-tools</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnome-tweak-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>终端运行<code>gnome-tweaks</code>，在外观中选择xml文件作为壁纸：</p><p><img src="https://i.loli.net/2020/07/21/5e2aXkIHi7Gzb4Y.png"></p></li></ol></li></ul><h2 id="安装基本软件"><a href="#安装基本软件" class="headerlink" title="安装基本软件"></a>安装基本软件</h2><h3 id="备份软件TimeShift"><a href="#备份软件TimeShift" class="headerlink" title="备份软件TimeShift"></a>备份软件<code>TimeShift</code></h3><p>​    阻止人们使用<code>Linux</code>系统的一个大原因我觉得是怕搞坏，即使在使用了<code>Linux</code>系统几年的我身上也是比较怕，所以，我们需要有良好的备份习惯。</p><p>​    <code>TimeShift</code>这个软件支持GUI，对新手很友好，也支持<strong>增量备份</strong>。下面是这个软件的介绍信息：</p><blockquote><p>DESCRIPTION<br>       timeshift  is a system restore utility which takes snapshots of<br>       the system at regular intervals. These  snapshots  can  be  re‐<br>       stored  at  a later date to undo system changes. Creates incre‐<br>       mental snapshots using rsync or  BTRFS  snapshots  using  BTRFS<br>       tools.</p></blockquote><ul><li><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> timeshift<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后我们就可以在菜单看到软件了。</p></li><li><p>使用</p><p>打开软件，会有个使用向导，按照步骤走就行。在用户主目录这里，我建议是<strong>Include All Files</strong>。然后就可以开始第一次备份。要注意的是，由于是第增量备份，所以第一次备份时的时间会比较长，以后的每次备份，只会在原有的基础上修改改动的部分。</p><p>点击创建，会自动备份，备份完了大概是这样（我分配的空间较少，所以禁用了自动备份）：</p><p><img src="https://i.loli.net/2020/07/21/vlG7eTEWzVu1RNa.png"></p></li></ul><h2 id="安装deepin-win，QQ，WeChat"><a href="#安装deepin-win，QQ，WeChat" class="headerlink" title="安装deepin-win，QQ，WeChat"></a>安装deepin-win，QQ，WeChat</h2><blockquote><p>国民应用，没办法，不得不装，deepin在这方面走在了前面，有人将deepin-wine移植到了Ubuntu上，项目地址：</p><p><a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">github</a></p><p><a href="https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu">gitee</a></p></blockquote><ul><li><p>安装<code>deepin-wine</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> deepin-wine-for-ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择合适于你的安装脚本，加可运行权限，我这里选择的是<code>install_2.8.22.sh</code>，执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x install_2.8.22.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> ./install_2.8.22.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装软件</p><p>下载并安装所需要的<code>deepin-wine</code>容器 <em>（建议在终端下使用<code>dpkg -i</code>安装容器，否则容易误报依赖错误）</em></p><ul><li><p>可使用<code>deepin</code>发布的最新版容器安装包：</p><ol><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/">QQ</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/">TIM</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/">QQ轻聊版</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/">微信</a> 如果出现依赖错误，请下载<a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.wechat_2.6.8.65deepin0_i386.deb">这个版本</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/">Foxmail</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/">百度网盘</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/">360压缩</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.com.winrar/">WinRAR</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.thunderspeed/">迅雷极速版</a></p></li><li><p><a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.taobao.aliclient.qianniu/">千牛卖家工作台</a></p></li></ol><p>其它deepin-wine容器：<a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/">阿里云镜像下载</a></p></li><li><p>若版本不兼容，可选择下载安装以下旧版包文件：</p><ol><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.qq.im_9.1.8deepin0_i386.deb">QQ</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.qq.office_2.0.0deepin4_i386.deb">TIM</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.qq.im.light_7.9.14308deepin8_i386.deb">QQ轻聊版</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.wechat_2.6.8.65deepin0_i386.deb">微信</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.foxmail_7.2deepin3_i386.deb">Foxmail</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.baidu.pan_5.7.3deepin0_i386.deb">百度网盘</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.cn.360.yasuo_4.0.0.1060deepin3_i386.deb">360压缩</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.cn.com.winrar_5.3.0deepin2_i386.deb">WinRAR</a></p></li><li><p><a href="https://gitee.com/wszqkzqk/deepin-wine-containers-for-ubuntu/raw/master/deepin.com.thunderspeed_7.10.35.366deepin18_i386.deb">迅雷极速版</a></p></li></ol></li></ul></li><li><p>手动更改配置（winecfg）</p><p>执行 <code>WINEPREFIX=~/.deepinwine/容器名称 deepin-wine winecfg</code> 即可，也可以用此方法来调整缩放问题</p></li><li><p>解决系统非中文语言环境时软件无法设置为中文</p><p>在/opt/deepinwine/tools/run.sh 中将 WINE_CMD 那一行修改为 WINE_CMD=”LC_ALL=zh_CN.UTF-8 deepin-wine”</p></li><li><p>微信更新问题</p><p>如果出现微信提示跟新问题执行这一条语句即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- https://deepin-wine.i-m.dev/setup.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><a href="https://blog.diqigan.cn/posts/wine-global-hotkey-problem.html">wine 应用程序全局快捷键无效的解决方案</a></p><ol><li><p>安装 xdotool</p><p>直接在命令行运行以下命令即可:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> --no-install-recommends xdotool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写 xdotool 脚本</p><blockquote><p>思路: Wine 应用在后台无法接收到快捷键状态, 此时借助 xdotool 向 Wine 应用发送模拟按键信息即可.</p></blockquote><p>在合适的位置新建一个脚本文件 “open_wechat.sh”, 写入以下内容:</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/sh#在当前运行的应用中找到名为WeChat.exe的应用程序，并向它发送按键事件"ctrl+alt+W"#WeChat的可执行文件名为WeChat.exe，如果是其它应用程序就修改成其它应用程序的可执行文件名, 应用名称大小写敏感, 一个字母都不能错!xdotool key --window $(xdotool search --limit 1 --all --pid $(pgrep WeChat.exe)) "ctrl+alt+W"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>赋予脚本可执行权限:</p><pre class="line-numbers language-none"><code class="language-none">chmod +x open_wechat.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果此时你的微信正好运行在后台, 执行这个脚本就可以把它召唤到前台. 如果没有, 请检查脚本是否有错误。</p></li><li><p>设置快捷键</p><p>图形界面依次打开 “设置” -&gt; “设备” -&gt; “键盘”, 点击列表最底部的 “+” 号添加自定义快捷键.</p><p><a href="https://camo.githubusercontent.com/23ae69e9c1369dcc18325a989469b499dcf36f64/68747470733a2f2f696d616765732e67697465652e636f6d2f75706c6f6164732f696d616765732f323032302f303131372f3037353134315f34643137666162345f313434323533302e706e67"><img src="https://camo.githubusercontent.com/23ae69e9c1369dcc18325a989469b499dcf36f64/68747470733a2f2f696d616765732e67697465652e636f6d2f75706c6f6164732f696d616765732f323032302f303131372f3037353134315f34643137666162345f313434323533302e706e67" alt="快捷键设置"></a></p><ul><li>名称随便, 填写 “打开微信” 即可;</li></ul><ul><li>命令填写刚才编写的脚本的<strong>全路径</strong>;</li><li>快捷键设置自己想用的快捷键即可, 建议于应用内部快捷键相同;</li><li>最后点击”添加”即可.</li></ul></li></ol></li><li><p>问题记录</p><ol><li><p>微信无法发送图片</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg62:i386<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Fcitx（常见的就是搜狗）不能输入：</p><ol><li><p>找到wineQQ的安装目录，我的是在：<code>/opt/deepinwine/apps/Deepin-QQ</code>下，有个<code>run.sh</code>，vim编辑，最后一行添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#=================================</span><span class="token comment">#搜狗输入法输入中文的问题</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span><span class="token string">"@im=fcitx"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span><span class="token string">"fcitx"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span><span class="token string">"fcitx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果是<code>Gnome</code>平台，可能会出现最小化之后不能再次输入的情况，还需要输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gsettings <span class="token builtin class-name">set</span> org.gnome.settings-daemon.plugins.keyboard active <span class="token boolean">false</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>/etc/envirment</code>下添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span><span class="token string">"@im=fcitx"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span><span class="token string">"fcitx"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span><span class="token string">"fcitx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时也在<code>/.profile</code>下加入。</p></li></ol></li></ol></li></ul><h2 id="更改键盘映射"><a href="#更改键盘映射" class="headerlink" title="更改键盘映射"></a>更改键盘映射</h2><p>这里介绍一般方法，并举出一个例子。</p><ol><li><p>找到你需要改键的<code>ketcode</code></p><p>输入命令<code>xev</code>，就能捕捉到一切动作，从中找出<code>keycode</code></p></li><li><p>导出目前使用的键盘映射</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmodmap -pke <span class="token operator">&gt;</span> ~/.Xmodmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改文件</p><p>我将键盘上的大小写键改成了方向键→，于是编辑文件，首行加上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">clear</span> Lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把<code>keycode  66</code>改成<code>keycode  66 = Right NoSymbol Right</code></p><p>结尾上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">add</span> Lock <span class="token operator">=</span> Caps_Lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmodmap ~/.Xmodmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自动激活</p><p>编辑<code>~/.xinitrc</code></p></li></ol><h2 id="zip解压乱码"><a href="#zip解压乱码" class="headerlink" title="zip解压乱码"></a>zip解压乱码</h2><h3 id="unzip解决方案："><a href="#unzip解决方案：" class="headerlink" title="unzip解决方案："></a>unzip解决方案：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> -O cp936 ./1.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="安装zsh的包管理器antigen"><a href="#安装zsh的包管理器antigen" class="headerlink" title="安装zsh的包管理器antigen"></a>安装zsh的包管理器<code>antigen</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -L git.io/antigen <span class="token operator">&gt;</span> .antigen.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> .zshrc<span class="token comment"># 写入</span><span class="token builtin class-name">source</span> /home/black/Tools/antigen.zsh<span class="token comment"># 加载oh-my-zsh库</span>antigen use oh-my-zsh<span class="token comment"># 加载原版oh-my-zsh中的功能(robbyrussell's oh-my-zsh).</span>antigen bundle <span class="token function">git</span>antigen bundle herokuantigen bundle pipantigen bundle leinantigen bundle command-not-found<span class="token comment"># 语法高亮功能</span>antigen bundle zsh-users/zsh-syntax-highlighting<span class="token comment"># 代码提示功能</span>antigen bundle zsh-users/zsh-autosuggestions<span class="token comment"># 自动补全功能</span>antigen bundle zsh-users/zsh-completions<span class="token comment"># 加载主题</span><span class="token comment">#antigen theme robbyrussell</span>antigen theme romkatv/powerlevel10k<span class="token comment"># 保存更改</span>antigen apply<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用别名alias"><a href="#使用别名alias" class="headerlink" title="使用别名alias"></a>使用别名alias</h2><ol><li><p>确保<code>.bashrc</code>中有这一段：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Alias definitions.</span><span class="token comment"># You may want to put all your additions into a separate file like</span><span class="token comment"># ~/.bash_aliases, instead of adding them here directly.</span><span class="token comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -f ~/.bash_aliases <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">.</span> ~/.bash_aliases<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑<code>~/.bash_aliases</code></p><blockquote><p>没有就自己创建</p></blockquote><p>比如：写上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">nvrun</span><span class="token operator">=</span><span class="token string">"__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查成功</p></li></ol><blockquote><p>如果你是使用的是Zsh，那么将第一步的代码添加到<code>.zshrc</code>里面，然后执行后面的步骤。</p></blockquote><h2 id="启动时自动使用独显"><a href="#启动时自动使用独显" class="headerlink" title="启动时自动使用独显"></a>启动时自动使用独显</h2><blockquote><p>添加别名已经讲过了</p></blockquote><ol><li><p>添加别名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">nvrun</span><span class="token operator">=</span><span class="token string">"__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvrun steam<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="steam-play-玩游戏时使用独显"><a href="#steam-play-玩游戏时使用独显" class="headerlink" title="steam play 玩游戏时使用独显"></a>steam play 玩游戏时使用独显</h2><p>游戏启动项加上<code>WINEDLLOVERRIDES="dxgi=n" %command%</code>这句</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
